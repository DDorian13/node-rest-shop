{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider from './useAuthProvider';\n\nvar getPermissionsWithoutProvider = function () {\n  return Promise.resolve([]);\n};\n/**\r\n * Get a callback for calling the authProvider.getPermissions() method.\r\n *\r\n * @see useAuthProvider\r\n *\r\n * @returns {Function} getPermissions callback\r\n *\r\n * This is a low level hook. See those more specialized hooks\r\n * offering state handling.\r\n *\r\n * @see usePermissions\r\n *\r\n * @example\r\n *\r\n * import { useGetPermissions } from 'react-admin';\r\n *\r\n * const Roles = () => {\r\n *     const [permissions, setPermissions] = useState([]);\r\n *     const getPermissions = useGetPermissions();\r\n *     useEffect(() => {\r\n *         getPermissions().then(permissions => setPermissions(permissions))\r\n *     }, [])\r\n *     return (\r\n *         <ul>\r\n *             {permissions.map((permission, key) => (\r\n *                 <li key={key}>{permission}</li>\r\n *             ))}\r\n *         </ul>\r\n *     );\r\n * }\r\n */\n\n\nvar useGetPermissions = function () {\n  var authProvider = useAuthProvider();\n  var getPermissions = useCallback(function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return authProvider.getPermissions(params);\n  }, [authProvider]);\n  return authProvider ? getPermissions : getPermissionsWithoutProvider;\n};\n\nexport default useGetPermissions;","map":{"version":3,"sources":["C:/Users/Felhasználó/IdeaProjects/node-rest-shop/client/node_modules/ra-core/esm/auth/useGetPermissions.js"],"names":["useCallback","useAuthProvider","getPermissionsWithoutProvider","Promise","resolve","useGetPermissions","authProvider","getPermissions","params"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AACA,IAAIC,6BAA6B,GAAG,YAAY;AAAE,SAAOC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AAA6B,CAA/E;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,IAAIC,iBAAiB,GAAG,YAAY;AAChC,MAAIC,YAAY,GAAGL,eAAe,EAAlC;AACA,MAAIM,cAAc,GAAGP,WAAW,CAAC,UAAUQ,MAAV,EAAkB;AAC/C,QAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,EAAT;AAAc;;AACvC,WAAOF,YAAY,CAACC,cAAb,CAA4BC,MAA5B,CAAP;AACH,GAH+B,EAG7B,CAACF,YAAD,CAH6B,CAAhC;AAIA,SAAOA,YAAY,GAAGC,cAAH,GAAoBL,6BAAvC;AACH,CAPD;;AAQA,eAAeG,iBAAf","sourcesContent":["import { useCallback } from 'react';\r\nimport useAuthProvider from './useAuthProvider';\r\nvar getPermissionsWithoutProvider = function () { return Promise.resolve([]); };\r\n/**\r\n * Get a callback for calling the authProvider.getPermissions() method.\r\n *\r\n * @see useAuthProvider\r\n *\r\n * @returns {Function} getPermissions callback\r\n *\r\n * This is a low level hook. See those more specialized hooks\r\n * offering state handling.\r\n *\r\n * @see usePermissions\r\n *\r\n * @example\r\n *\r\n * import { useGetPermissions } from 'react-admin';\r\n *\r\n * const Roles = () => {\r\n *     const [permissions, setPermissions] = useState([]);\r\n *     const getPermissions = useGetPermissions();\r\n *     useEffect(() => {\r\n *         getPermissions().then(permissions => setPermissions(permissions))\r\n *     }, [])\r\n *     return (\r\n *         <ul>\r\n *             {permissions.map((permission, key) => (\r\n *                 <li key={key}>{permission}</li>\r\n *             ))}\r\n *         </ul>\r\n *     );\r\n * }\r\n */\r\nvar useGetPermissions = function () {\r\n    var authProvider = useAuthProvider();\r\n    var getPermissions = useCallback(function (params) {\r\n        if (params === void 0) { params = {}; }\r\n        return authProvider.getPermissions(params);\r\n    }, [authProvider]);\r\n    return authProvider ? getPermissions : getPermissionsWithoutProvider;\r\n};\r\nexport default useGetPermissions;\r\n"]},"metadata":{},"sourceType":"module"}