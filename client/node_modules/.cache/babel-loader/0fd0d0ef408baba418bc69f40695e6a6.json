{"ast":null,"code":"import { useSelector, shallowEqual } from 'react-redux';\nimport get from 'lodash/get';\nimport useQueryWithStore from './useQueryWithStore';\nvar defaultData = {};\n/**\r\n * Call the dataProvider.getList() method and return the resolved result\r\n * as well as the loading state.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: { loading: true, loaded: false }\r\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true }\r\n * - error: { error: [error from response], loading: false, loaded: true }\r\n *\r\n * This hook will return the cached result when called a second time\r\n * with the same parameters, until the response arrives.\r\n *\r\n * @param {string} resource The resource name, e.g. 'posts'\r\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\r\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\r\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\r\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded }.\r\n *\r\n * @example\r\n *\r\n * import { useGetList } from 'react-admin';\r\n *\r\n * const LatestNews = () => {\r\n *     const { data, ids, loading, error } = useGetList(\r\n *         'posts',\r\n *         { page: 1, perPage: 10 },\r\n *         { field: 'published_at', order: 'DESC' }\r\n *     );\r\n *     if (loading) { return <Loading />; }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <ul>{ids.map(id =>\r\n *         <li key={id}>{data[id].title}</li>\r\n *     )}</ul>;\r\n * };\r\n */\n\nvar useGetList = function (resource, pagination, sort, filter, options) {\n  var requestSignature = JSON.stringify({\n    pagination: pagination,\n    sort: sort,\n    filter: filter\n  });\n\n  var _a = useQueryWithStore({\n    type: 'getList',\n    resource: resource,\n    payload: {\n      pagination: pagination,\n      sort: sort,\n      filter: filter\n    }\n  }, options, // data selector (may return [])\n  function (state) {\n    return get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'ids'], []);\n  }, // total selector (may return undefined)\n  function (state) {\n    return get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'total']);\n  }),\n      ids = _a.data,\n      total = _a.total,\n      error = _a.error,\n      loading = _a.loading,\n      loaded = _a.loaded;\n\n  var data = useSelector(function (state) {\n    if (!ids) return defaultData;\n    var allResourceData = get(state.admin.resources, [resource, 'data'], defaultData);\n    return ids.map(function (id) {\n      return allResourceData[id];\n    }).reduce(function (acc, record) {\n      if (!record) return acc;\n      acc[record.id] = record;\n      return acc;\n    }, {});\n  }, shallowEqual);\n  return {\n    data: data,\n    ids: ids,\n    total: total,\n    error: error,\n    loading: loading,\n    loaded: loaded\n  };\n};\n\nexport default useGetList;","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/ra-core/esm/dataProvider/useGetList.js"],"names":["useSelector","shallowEqual","get","useQueryWithStore","defaultData","useGetList","resource","pagination","sort","filter","options","requestSignature","JSON","stringify","_a","type","payload","state","admin","resources","ids","data","total","error","loading","loaded","allResourceData","map","id","reduce","acc","record"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,YAAtB,QAA0C,aAA1C;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,IAAIC,UAAU,GAAG,UAAUC,QAAV,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,MAAtC,EAA8CC,OAA9C,EAAuD;AACpE,MAAIC,gBAAgB,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEN,IAAAA,UAAU,EAAEA,UAAd;AAA0BC,IAAAA,IAAI,EAAEA,IAAhC;AAAsCC,IAAAA,MAAM,EAAEA;AAA9C,GAAf,CAAvB;;AACA,MAAIK,EAAE,GAAGX,iBAAiB,CAAC;AAAEY,IAAAA,IAAI,EAAE,SAAR;AAAmBT,IAAAA,QAAQ,EAAEA,QAA7B;AAAuCU,IAAAA,OAAO,EAAE;AAAET,MAAAA,UAAU,EAAEA,UAAd;AAA0BC,MAAAA,IAAI,EAAEA,IAAhC;AAAsCC,MAAAA,MAAM,EAAEA;AAA9C;AAAhD,GAAD,EAA2GC,OAA3G,EAC1B;AACA,YAAUO,KAAV,EAAiB;AACb,WAAOf,GAAG,CAACe,KAAK,CAACC,KAAN,CAAYC,SAAb,EAAwB,CAACb,QAAD,EAAW,MAAX,EAAmB,gBAAnB,EAAqCK,gBAArC,EAAuD,KAAvD,CAAxB,EAAuF,EAAvF,CAAV;AACH,GAJyB,EAK1B;AACA,YAAUM,KAAV,EAAiB;AACb,WAAOf,GAAG,CAACe,KAAK,CAACC,KAAN,CAAYC,SAAb,EAAwB,CAC9Bb,QAD8B,EAE9B,MAF8B,EAG9B,gBAH8B,EAI9BK,gBAJ8B,EAK9B,OAL8B,CAAxB,CAAV;AAOH,GAdyB,CAA1B;AAAA,MAcIS,GAAG,GAAGN,EAAE,CAACO,IAdb;AAAA,MAcmBC,KAAK,GAAGR,EAAE,CAACQ,KAd9B;AAAA,MAcqCC,KAAK,GAAGT,EAAE,CAACS,KAdhD;AAAA,MAcuDC,OAAO,GAAGV,EAAE,CAACU,OAdpE;AAAA,MAc6EC,MAAM,GAAGX,EAAE,CAACW,MAdzF;;AAeA,MAAIJ,IAAI,GAAGrB,WAAW,CAAC,UAAUiB,KAAV,EAAiB;AACpC,QAAI,CAACG,GAAL,EACI,OAAOhB,WAAP;AACJ,QAAIsB,eAAe,GAAGxB,GAAG,CAACe,KAAK,CAACC,KAAN,CAAYC,SAAb,EAAwB,CAACb,QAAD,EAAW,MAAX,CAAxB,EAA4CF,WAA5C,CAAzB;AACA,WAAOgB,GAAG,CACLO,GADE,CACE,UAAUC,EAAV,EAAc;AAAE,aAAOF,eAAe,CAACE,EAAD,CAAtB;AAA6B,KAD/C,EAEFC,MAFE,CAEK,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAC/B,UAAI,CAACA,MAAL,EACI,OAAOD,GAAP;AACJA,MAAAA,GAAG,CAACC,MAAM,CAACH,EAAR,CAAH,GAAiBG,MAAjB;AACA,aAAOD,GAAP;AACH,KAPM,EAOJ,EAPI,CAAP;AAQH,GAZqB,EAYnB7B,YAZmB,CAAtB;AAaA,SAAO;AAAEoB,IAAAA,IAAI,EAAEA,IAAR;AAAcD,IAAAA,GAAG,EAAEA,GAAnB;AAAwBE,IAAAA,KAAK,EAAEA,KAA/B;AAAsCC,IAAAA,KAAK,EAAEA,KAA7C;AAAoDC,IAAAA,OAAO,EAAEA,OAA7D;AAAsEC,IAAAA,MAAM,EAAEA;AAA9E,GAAP;AACH,CA/BD;;AAgCA,eAAepB,UAAf","sourcesContent":["import { useSelector, shallowEqual } from 'react-redux';\r\nimport get from 'lodash/get';\r\nimport useQueryWithStore from './useQueryWithStore';\r\nvar defaultData = {};\r\n/**\r\n * Call the dataProvider.getList() method and return the resolved result\r\n * as well as the loading state.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: { loading: true, loaded: false }\r\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true }\r\n * - error: { error: [error from response], loading: false, loaded: true }\r\n *\r\n * This hook will return the cached result when called a second time\r\n * with the same parameters, until the response arrives.\r\n *\r\n * @param {string} resource The resource name, e.g. 'posts'\r\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\r\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\r\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\r\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded }.\r\n *\r\n * @example\r\n *\r\n * import { useGetList } from 'react-admin';\r\n *\r\n * const LatestNews = () => {\r\n *     const { data, ids, loading, error } = useGetList(\r\n *         'posts',\r\n *         { page: 1, perPage: 10 },\r\n *         { field: 'published_at', order: 'DESC' }\r\n *     );\r\n *     if (loading) { return <Loading />; }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <ul>{ids.map(id =>\r\n *         <li key={id}>{data[id].title}</li>\r\n *     )}</ul>;\r\n * };\r\n */\r\nvar useGetList = function (resource, pagination, sort, filter, options) {\r\n    var requestSignature = JSON.stringify({ pagination: pagination, sort: sort, filter: filter });\r\n    var _a = useQueryWithStore({ type: 'getList', resource: resource, payload: { pagination: pagination, sort: sort, filter: filter } }, options, \r\n    // data selector (may return [])\r\n    function (state) {\r\n        return get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'ids'], []);\r\n    }, \r\n    // total selector (may return undefined)\r\n    function (state) {\r\n        return get(state.admin.resources, [\r\n            resource,\r\n            'list',\r\n            'cachedRequests',\r\n            requestSignature,\r\n            'total',\r\n        ]);\r\n    }), ids = _a.data, total = _a.total, error = _a.error, loading = _a.loading, loaded = _a.loaded;\r\n    var data = useSelector(function (state) {\r\n        if (!ids)\r\n            return defaultData;\r\n        var allResourceData = get(state.admin.resources, [resource, 'data'], defaultData);\r\n        return ids\r\n            .map(function (id) { return allResourceData[id]; })\r\n            .reduce(function (acc, record) {\r\n            if (!record)\r\n                return acc;\r\n            acc[record.id] = record;\r\n            return acc;\r\n        }, {});\r\n    }, shallowEqual);\r\n    return { data: data, ids: ids, total: total, error: error, loading: loading, loaded: loaded };\r\n};\r\nexport default useGetList;\r\n"]},"metadata":{},"sourceType":"module"}