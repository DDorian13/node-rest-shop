{"ast":null,"code":"import useMutation from './useMutation';\n/**\r\n * Get a callback to call the dataProvider.updateMany() method, the result\r\n * of the call (the list of updated record ids), and the loading state.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: [callback, { loading: true, loaded: false }]\r\n * - success: [callback, { data: [data from response], loading: false, loaded: true }]\r\n * - error: [callback, { error: [error from response], loading: false, loaded: true }]\r\n *\r\n * @param resource The resource name, e.g. 'posts'\r\n * @param ids The resource identifiers, e.g. [123, 456]\r\n * @param data The updates to merge into all records, e.g. { views: 10 }\r\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as [update, { data, error, loading, loaded }].\r\n *\r\n * @example\r\n *\r\n * import { useUpdateMany } from 'react-admin';\r\n *\r\n * const BulkResetViewsButton = ({ selectedIds }) => {\r\n *     const [updateMany, { loading, error }] = useUpdateMany('posts', selectedIds, { views: 0 });\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <button disabled={loading} onClick={updateMany}>Reset views</button>;\r\n * };\r\n */\n\nvar useUpdateMany = function (resource, ids, data, options) {\n  return useMutation({\n    type: 'updateMany',\n    resource: resource,\n    payload: {\n      ids: ids,\n      data: data\n    }\n  }, options);\n};\n\nexport default useUpdateMany;","map":{"version":3,"sources":["C:/Users/Felhasználó/IdeaProjects/node-rest-shop/client/node_modules/ra-core/esm/dataProvider/useUpdateMany.js"],"names":["useMutation","useUpdateMany","resource","ids","data","options","type","payload"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAIC,aAAa,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AACxD,SAAOL,WAAW,CAAC;AAAEM,IAAAA,IAAI,EAAE,YAAR;AAAsBJ,IAAAA,QAAQ,EAAEA,QAAhC;AAA0CK,IAAAA,OAAO,EAAE;AAAEJ,MAAAA,GAAG,EAAEA,GAAP;AAAYC,MAAAA,IAAI,EAAEA;AAAlB;AAAnD,GAAD,EAAgFC,OAAhF,CAAlB;AACH,CAFD;;AAGA,eAAeJ,aAAf","sourcesContent":["import useMutation from './useMutation';\r\n/**\r\n * Get a callback to call the dataProvider.updateMany() method, the result\r\n * of the call (the list of updated record ids), and the loading state.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: [callback, { loading: true, loaded: false }]\r\n * - success: [callback, { data: [data from response], loading: false, loaded: true }]\r\n * - error: [callback, { error: [error from response], loading: false, loaded: true }]\r\n *\r\n * @param resource The resource name, e.g. 'posts'\r\n * @param ids The resource identifiers, e.g. [123, 456]\r\n * @param data The updates to merge into all records, e.g. { views: 10 }\r\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as [update, { data, error, loading, loaded }].\r\n *\r\n * @example\r\n *\r\n * import { useUpdateMany } from 'react-admin';\r\n *\r\n * const BulkResetViewsButton = ({ selectedIds }) => {\r\n *     const [updateMany, { loading, error }] = useUpdateMany('posts', selectedIds, { views: 0 });\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <button disabled={loading} onClick={updateMany}>Reset views</button>;\r\n * };\r\n */\r\nvar useUpdateMany = function (resource, ids, data, options) {\r\n    return useMutation({ type: 'updateMany', resource: resource, payload: { ids: ids, data: data } }, options);\r\n};\r\nexport default useUpdateMany;\r\n"]},"metadata":{},"sourceType":"module"}