{"ast":null,"code":"import decodeJwt from 'jwt-decode';\nconst authProvider = {\n  //login-ben username-t kell hasznalni, mert az a neve a felso beviteli mezonek\n  login: ({\n    username,\n    password\n  }) => {\n    const request = new Request('http://localhost:3000/puser/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email: username,\n        password: password\n      }),\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    });\n    return fetch(request).then(response => {\n      if (response.status < 200 || response.status >= 300) {\n        throw new Error(response.statusText);\n      }\n\n      return response.json();\n    }).then(({\n      token\n    }) => {\n      const decodedToken = decodeJwt(token);\n      localStorage.setItem('token', JSON.stringify(token));\n      localStorage.setItem('permissions', decodedToken.permissions);\n    });\n  },\n  getIdentity: () => {\n    const {\n      email,\n      userId,\n      permissions\n    } = JSON.parse(localStorage.getItem('token'));\n    return {\n      email,\n      userId,\n      permissions\n    };\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('permissions');\n    return Promise.resolve();\n  },\n  checkError: error => {\n    const status = error.status;\n\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('token');\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  },\n  checkAuth: () => localStorage.getItem('token') ? Promise.resolve() : Promise.reject(),\n  getPermissions: () => {\n    const role = localStorage.getItem('permissions');\n    return role ? Promise.resolve(role) : Promise.reject();\n  }\n};\nexport default authProvider;","map":{"version":3,"sources":["C:/Users/Felhasználó/IdeaProjects/node-rest-shop/client/src/authentication/authProvider.js"],"names":["decodeJwt","authProvider","login","username","password","request","Request","method","body","JSON","stringify","email","headers","Headers","fetch","then","response","status","Error","statusText","json","token","decodedToken","localStorage","setItem","permissions","getIdentity","userId","parse","getItem","logout","removeItem","Promise","resolve","checkError","error","reject","checkAuth","getPermissions","role"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,MAAMC,YAAY,GAAG;AACjB;AACAC,EAAAA,KAAK,EAAE,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,KAA6B;AAChC,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,mCAAZ,EAAiD;AAC7DC,MAAAA,MAAM,EAAE,MADqD;AAE7DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,KAAK,EAAER,QAAT;AAAmBC,QAAAA,QAAQ,EAAEA;AAA7B,OAAf,CAFuD;AAG7DQ,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,wBAAgB;AAAlB,OAAZ;AAHoD,KAAjD,CAAhB;AAKA,WAAOC,KAAK,CAACT,OAAD,CAAL,CACFU,IADE,CACGC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACC,MAAT,GAAkB,GAAlB,IAAyBD,QAAQ,CAACC,MAAT,IAAmB,GAAhD,EAAqD;AACjD,cAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACH;;AACD,aAAOH,QAAQ,CAACI,IAAT,EAAP;AACH,KANE,EAOFL,IAPE,CAOG,CAAC;AAACM,MAAAA;AAAD,KAAD,KAAa;AACf,YAAMC,YAAY,GAAGtB,SAAS,CAACqB,KAAD,CAA9B;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8Bf,IAAI,CAACC,SAAL,CAAeW,KAAf,CAA9B;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCF,YAAY,CAACG,WAAjD;AACH,KAXE,CAAP;AAYH,GApBgB;AAqBjBC,EAAAA,WAAW,EAAE,MAAM;AACf,UAAM;AAAEf,MAAAA,KAAF;AAASgB,MAAAA,MAAT;AAAiBF,MAAAA;AAAjB,QAAiChB,IAAI,CAACmB,KAAL,CAAWL,YAAY,CAACM,OAAb,CAAqB,OAArB,CAAX,CAAvC;AACA,WAAO;AAAElB,MAAAA,KAAF;AAASgB,MAAAA,MAAT;AAAiBF,MAAAA;AAAjB,KAAP;AACH,GAxBgB;AAyBjBK,EAAAA,MAAM,EAAE,MAAM;AACVP,IAAAA,YAAY,CAACQ,UAAb,CAAwB,OAAxB;AACAR,IAAAA,YAAY,CAACQ,UAAb,CAAwB,aAAxB;AACA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH,GA7BgB;AA8BjBC,EAAAA,UAAU,EAAGC,KAAD,IAAW;AACnB,UAAMlB,MAAM,GAAGkB,KAAK,CAAClB,MAArB;;AACA,QAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AAClCM,MAAAA,YAAY,CAACQ,UAAb,CAAwB,OAAxB;AACA,aAAOC,OAAO,CAACI,MAAR,EAAP;AACH;;AACD,WAAOJ,OAAO,CAACC,OAAR,EAAP;AACH,GArCgB;AAsCjBI,EAAAA,SAAS,EAAE,MAAMd,YAAY,CAACM,OAAb,CAAqB,OAArB,IACXG,OAAO,CAACC,OAAR,EADW,GAEXD,OAAO,CAACI,MAAR,EAxCW;AAyCjBE,EAAAA,cAAc,EAAE,MAAM;AAClB,UAAMC,IAAI,GAAGhB,YAAY,CAACM,OAAb,CAAqB,aAArB,CAAb;AACA,WAAOU,IAAI,GAAGP,OAAO,CAACC,OAAR,CAAgBM,IAAhB,CAAH,GAA2BP,OAAO,CAACI,MAAR,EAAtC;AACH;AA5CgB,CAArB;AA+CA,eAAenC,YAAf","sourcesContent":["import decodeJwt from 'jwt-decode';\r\n\r\nconst authProvider = {\r\n    //login-ben username-t kell hasznalni, mert az a neve a felso beviteli mezonek\r\n    login: ({ username, password }) =>  {\r\n        const request = new Request('http://localhost:3000/puser/login', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ email: username, password: password }),\r\n            headers: new Headers({ 'Content-Type': 'application/json' }),\r\n        });\r\n        return fetch(request)\r\n            .then(response => {\r\n                if (response.status < 200 || response.status >= 300) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(({token}) => {\r\n                const decodedToken = decodeJwt(token);\r\n                localStorage.setItem('token', JSON.stringify(token));\r\n                localStorage.setItem('permissions', decodedToken.permissions);\r\n            });\r\n    },\r\n    getIdentity: () => {\r\n        const { email, userId, permissions } = JSON.parse(localStorage.getItem('token'));\r\n        return { email, userId, permissions };\r\n    },\r\n    logout: () => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('permissions');\r\n        return Promise.resolve();\r\n    },\r\n    checkError: (error) => {\r\n        const status = error.status;\r\n        if (status === 401 || status === 403) {\r\n            localStorage.removeItem('token');\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    },\r\n    checkAuth: () => localStorage.getItem('token')\r\n        ? Promise.resolve()\r\n        : Promise.reject(),\r\n    getPermissions: () => {\r\n        const role = localStorage.getItem('permissions');\r\n        return role ? Promise.resolve(role) : Promise.reject();\r\n    }\r\n};\r\n\r\nexport default authProvider;"]},"metadata":{},"sourceType":"module"}