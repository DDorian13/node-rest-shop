{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { CRUD_GET_MANY_REFERENCE } from '../actions/dataActions/crudGetManyReference';\nimport useQueryWithStore from './useQueryWithStore';\nimport { getReferences, getIds, getTotal, nameRelatedTo } from '../reducer/admin/references/oneToMany';\nimport { useMemo } from 'react';\n/**\r\n * Call the dataProvider.getManyReference() method and return the resolved result\r\n * as well as the loading state.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: { loading: true, loaded: false }\r\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true }\r\n * - error: { error: [error from response], loading: false, loaded: true }\r\n *\r\n * This hook will return the cached result when called a second time\r\n * with the same parameters, until the response arrives.\r\n *\r\n * @param {string} resource The referenced resource name, e.g. 'comments'\r\n * @param {string} target The target resource key, e.g. 'post_id'\r\n * @param {Object} id The identifier of the record to look for in 'target'\r\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\r\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\r\n * @param {Object} filter The request filters, e.g. { body: 'hello, world' }\r\n * @param {string} referencingResource The resource name, e.g. 'posts'. Used to generate a cache key\r\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded }.\r\n *\r\n * @example\r\n *\r\n * import { useGetManyReference } from 'react-admin';\r\n *\r\n * const PostComments = ({ post_id }) => {\r\n *     const { data, ids, loading, error } = useGetManyReference(\r\n *         'comments',\r\n *         'post_id',\r\n *         post_id,\r\n *         { page: 1, perPage: 10 },\r\n *         { field: 'published_at', order: 'DESC' }\r\n *         {},\r\n *         'posts',\r\n *     );\r\n *     if (loading) { return <Loading />; }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <ul>{ids.map(id =>\r\n *         <li key={id}>{data[id].body}</li>\r\n *     )}</ul>;\r\n * };\r\n */\n\nvar useGetManyReference = function (resource, target, id, pagination, sort, filter, referencingResource, options) {\n  var relatedTo = useMemo(function () {\n    return nameRelatedTo(resource, id, referencingResource, target, filter);\n  }, [filter, resource, id, referencingResource, target]);\n\n  var _a = useQueryWithStore({\n    type: 'getManyReference',\n    resource: resource,\n    payload: {\n      target: target,\n      id: id,\n      pagination: pagination,\n      sort: sort,\n      filter: filter\n    }\n  }, __assign(__assign({}, options), {\n    relatedTo: relatedTo,\n    action: CRUD_GET_MANY_REFERENCE\n  }), selectIds(relatedTo), selectTotal(relatedTo)),\n      ids = _a.data,\n      total = _a.total,\n      error = _a.error,\n      loading = _a.loading,\n      loaded = _a.loaded;\n\n  var data = useSelector(selectData(resource, relatedTo), shallowEqual);\n  return {\n    data: data,\n    ids: ids,\n    total: total,\n    error: error,\n    loading: loading,\n    loaded: loaded\n  };\n};\n\nexport default useGetManyReference;\n\nvar selectData = function (reference, relatedTo) {\n  return function (state) {\n    return getReferences(state, reference, relatedTo);\n  };\n};\n\nvar selectIds = function (relatedTo) {\n  return function (state) {\n    return getIds(state, relatedTo);\n  };\n};\n\nvar selectTotal = function (relatedTo) {\n  return function (state) {\n    return getTotal(state, relatedTo);\n  };\n};","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/ra-core/esm/dataProvider/useGetManyReference.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useSelector","shallowEqual","CRUD_GET_MANY_REFERENCE","useQueryWithStore","getReferences","getIds","getTotal","nameRelatedTo","useMemo","useGetManyReference","resource","target","id","pagination","sort","filter","referencingResource","options","relatedTo","_a","type","payload","action","selectIds","selectTotal","ids","data","total","error","loading","loaded","selectData","reference","state"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\nimport { CRUD_GET_MANY_REFERENCE } from '../actions/dataActions/crudGetManyReference';\r\nimport useQueryWithStore from './useQueryWithStore';\r\nimport { getReferences, getIds, getTotal, nameRelatedTo, } from '../reducer/admin/references/oneToMany';\r\nimport { useMemo } from 'react';\r\n/**\r\n * Call the dataProvider.getManyReference() method and return the resolved result\r\n * as well as the loading state.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: { loading: true, loaded: false }\r\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true }\r\n * - error: { error: [error from response], loading: false, loaded: true }\r\n *\r\n * This hook will return the cached result when called a second time\r\n * with the same parameters, until the response arrives.\r\n *\r\n * @param {string} resource The referenced resource name, e.g. 'comments'\r\n * @param {string} target The target resource key, e.g. 'post_id'\r\n * @param {Object} id The identifier of the record to look for in 'target'\r\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\r\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\r\n * @param {Object} filter The request filters, e.g. { body: 'hello, world' }\r\n * @param {string} referencingResource The resource name, e.g. 'posts'. Used to generate a cache key\r\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded }.\r\n *\r\n * @example\r\n *\r\n * import { useGetManyReference } from 'react-admin';\r\n *\r\n * const PostComments = ({ post_id }) => {\r\n *     const { data, ids, loading, error } = useGetManyReference(\r\n *         'comments',\r\n *         'post_id',\r\n *         post_id,\r\n *         { page: 1, perPage: 10 },\r\n *         { field: 'published_at', order: 'DESC' }\r\n *         {},\r\n *         'posts',\r\n *     );\r\n *     if (loading) { return <Loading />; }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <ul>{ids.map(id =>\r\n *         <li key={id}>{data[id].body}</li>\r\n *     )}</ul>;\r\n * };\r\n */\r\nvar useGetManyReference = function (resource, target, id, pagination, sort, filter, referencingResource, options) {\r\n    var relatedTo = useMemo(function () { return nameRelatedTo(resource, id, referencingResource, target, filter); }, [filter, resource, id, referencingResource, target]);\r\n    var _a = useQueryWithStore({\r\n        type: 'getManyReference',\r\n        resource: resource,\r\n        payload: { target: target, id: id, pagination: pagination, sort: sort, filter: filter },\r\n    }, __assign(__assign({}, options), { relatedTo: relatedTo, action: CRUD_GET_MANY_REFERENCE }), selectIds(relatedTo), selectTotal(relatedTo)), ids = _a.data, total = _a.total, error = _a.error, loading = _a.loading, loaded = _a.loaded;\r\n    var data = useSelector(selectData(resource, relatedTo), shallowEqual);\r\n    return { data: data, ids: ids, total: total, error: error, loading: loading, loaded: loaded };\r\n};\r\nexport default useGetManyReference;\r\nvar selectData = function (reference, relatedTo) { return function (state) { return getReferences(state, reference, relatedTo); }; };\r\nvar selectIds = function (relatedTo) { return function (state) {\r\n    return getIds(state, relatedTo);\r\n}; };\r\nvar selectTotal = function (relatedTo) { return function (state) {\r\n    return getTotal(state, relatedTo);\r\n}; };\r\n"]},"metadata":{},"sourceType":"module"}