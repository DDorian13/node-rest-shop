{"ast":null,"code":"import { createContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\n/**\r\n * Context to store the pagination part of the useListController() result.\r\n *\r\n * Use the useListPaginationContext() hook to read the pagination information.\r\n * That's what List components do in react-admn (e.g. <Pagination>).\r\n *\r\n * @typedef {Object} ListPaginationContextValue\r\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\r\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\r\n * @prop {integer}  page the current page. Starts at 1\r\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\r\n * @prop {integer}  perPage the number of results per page. Defaults to 25\r\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\r\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\r\n *\r\n * @typedef Props\r\n * @prop {ListPaginationContextValue} value\r\n *\r\n * @param {Props}\r\n *\r\n * @see useListController\r\n * @see useListContext\r\n *\r\n * @example\r\n *\r\n * import { useListController, ListPaginationContext } from 'ra-core';\r\n *\r\n * const List = props => {\r\n *     const controllerProps = useListController(props);\r\n *     return (\r\n *         <ListPaginationContext.Provider value={controllerProps}>\r\n *             ...\r\n *         </ListPaginationContext.Provider>\r\n *     );\r\n * };\r\n */\n\nvar ListPaginationContext = createContext({\n  loading: null,\n  page: null,\n  perPage: null,\n  setPage: null,\n  setPerPage: null,\n  total: null,\n  resource: null\n});\nListPaginationContext.displayName = 'ListPaginationContext';\nexport var usePickPaginationContext = function (context) {\n  return useMemo(function () {\n    return pick(context, ['loading', 'page', 'perPage', 'setPage', 'setPerPage', 'total', 'resource']);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [context.loading, context.page, context.perPage, context.setPage, context.setPerPage, context.total]);\n};\nexport default ListPaginationContext;","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/ra-core/esm/controller/ListPaginationContext.js"],"names":["createContext","useMemo","pick","ListPaginationContext","loading","page","perPage","setPage","setPerPage","total","resource","displayName","usePickPaginationContext","context"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,OAAxB,QAAuC,OAAvC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,IAAIC,qBAAqB,GAAGH,aAAa,CAAC;AACtCI,EAAAA,OAAO,EAAE,IAD6B;AAEtCC,EAAAA,IAAI,EAAE,IAFgC;AAGtCC,EAAAA,OAAO,EAAE,IAH6B;AAItCC,EAAAA,OAAO,EAAE,IAJ6B;AAKtCC,EAAAA,UAAU,EAAE,IAL0B;AAMtCC,EAAAA,KAAK,EAAE,IAN+B;AAOtCC,EAAAA,QAAQ,EAAE;AAP4B,CAAD,CAAzC;AASAP,qBAAqB,CAACQ,WAAtB,GAAoC,uBAApC;AACA,OAAO,IAAIC,wBAAwB,GAAG,UAAUC,OAAV,EAAmB;AACrD,SAAOZ,OAAO,CAAC,YAAY;AACvB,WAAOC,IAAI,CAACW,OAAD,EAAU,CACjB,SADiB,EAEjB,MAFiB,EAGjB,SAHiB,EAIjB,SAJiB,EAKjB,YALiB,EAMjB,OANiB,EAOjB,UAPiB,CAAV,CAAX;AASH,GAVa,EAWd;AACA,GACIA,OAAO,CAACT,OADZ,EAEIS,OAAO,CAACR,IAFZ,EAGIQ,OAAO,CAACP,OAHZ,EAIIO,OAAO,CAACN,OAJZ,EAKIM,OAAO,CAACL,UALZ,EAMIK,OAAO,CAACJ,KANZ,CAZc,CAAd;AAoBH,CArBM;AAsBP,eAAeN,qBAAf","sourcesContent":["import { createContext, useMemo } from 'react';\r\nimport pick from 'lodash/pick';\r\n/**\r\n * Context to store the pagination part of the useListController() result.\r\n *\r\n * Use the useListPaginationContext() hook to read the pagination information.\r\n * That's what List components do in react-admn (e.g. <Pagination>).\r\n *\r\n * @typedef {Object} ListPaginationContextValue\r\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\r\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\r\n * @prop {integer}  page the current page. Starts at 1\r\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\r\n * @prop {integer}  perPage the number of results per page. Defaults to 25\r\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\r\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\r\n *\r\n * @typedef Props\r\n * @prop {ListPaginationContextValue} value\r\n *\r\n * @param {Props}\r\n *\r\n * @see useListController\r\n * @see useListContext\r\n *\r\n * @example\r\n *\r\n * import { useListController, ListPaginationContext } from 'ra-core';\r\n *\r\n * const List = props => {\r\n *     const controllerProps = useListController(props);\r\n *     return (\r\n *         <ListPaginationContext.Provider value={controllerProps}>\r\n *             ...\r\n *         </ListPaginationContext.Provider>\r\n *     );\r\n * };\r\n */\r\nvar ListPaginationContext = createContext({\r\n    loading: null,\r\n    page: null,\r\n    perPage: null,\r\n    setPage: null,\r\n    setPerPage: null,\r\n    total: null,\r\n    resource: null,\r\n});\r\nListPaginationContext.displayName = 'ListPaginationContext';\r\nexport var usePickPaginationContext = function (context) {\r\n    return useMemo(function () {\r\n        return pick(context, [\r\n            'loading',\r\n            'page',\r\n            'perPage',\r\n            'setPage',\r\n            'setPerPage',\r\n            'total',\r\n            'resource',\r\n        ]);\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [\r\n        context.loading,\r\n        context.page,\r\n        context.perPage,\r\n        context.setPage,\r\n        context.setPerPage,\r\n        context.total,\r\n    ]);\r\n};\r\nexport default ListPaginationContext;\r\n"]},"metadata":{},"sourceType":"module"}