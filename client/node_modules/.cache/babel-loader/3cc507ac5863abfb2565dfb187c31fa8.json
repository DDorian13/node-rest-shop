{"ast":null,"code":"import get from 'lodash/get';\nimport useQueryWithStore from './useQueryWithStore';\n/**\r\n * Call the dataProvider.getOne() method and return the resolved value\r\n * as well as the loading state.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: { loading: true, loaded: false }\r\n * - success: { data: [data from response], loading: false, loaded: true }\r\n * - error: { error: [error from response], loading: false, loaded: true }\r\n *\r\n * This hook will return the cached result when called a second time\r\n * with the same parameters, until the response arrives.\r\n *\r\n * @param resource The resource name, e.g. 'posts'\r\n * @param id The resource identifier, e.g. 123\r\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as { data, error, loading, loaded }.\r\n *\r\n * @example\r\n *\r\n * import { useGetOne } from 'react-admin';\r\n *\r\n * const UserProfile = ({ record }) => {\r\n *     const { data, loading, error } = useGetOne('users', record.id);\r\n *     if (loading) { return <Loading />; }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <div>User {data.username}</div>;\r\n * };\r\n */\n\nvar useGetOne = function (resource, id, options) {\n  return useQueryWithStore({\n    type: 'getOne',\n    resource: resource,\n    payload: {\n      id: id\n    }\n  }, options, function (state) {\n    if ( // resources are registered\n    Object.keys(state.admin.resources).length > 0 && // no registered resource mathing the query\n    !state.admin.resources[resource]) {\n      throw new Error(\"No <Resource> defined for \\\"\" + resource + \"\\\". useGetOne() relies on the Redux store, so it cannot work if you don't include a <Resource>.\");\n    }\n\n    return get(state, ['admin', 'resources', resource, 'data', id]);\n  });\n};\n\nexport default useGetOne;","map":{"version":3,"sources":["C:/Users/Felhasználó/IdeaProjects/node-rest-shop/client/node_modules/ra-core/esm/dataProvider/useGetOne.js"],"names":["get","useQueryWithStore","useGetOne","resource","id","options","type","payload","state","Object","keys","admin","resources","length","Error"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAIC,SAAS,GAAG,UAAUC,QAAV,EAAoBC,EAApB,EAAwBC,OAAxB,EAAiC;AAC7C,SAAOJ,iBAAiB,CAAC;AAAEK,IAAAA,IAAI,EAAE,QAAR;AAAkBH,IAAAA,QAAQ,EAAEA,QAA5B;AAAsCI,IAAAA,OAAO,EAAE;AAAEH,MAAAA,EAAE,EAAEA;AAAN;AAA/C,GAAD,EAA8DC,OAA9D,EAAuE,UAAUG,KAAV,EAAiB;AAC5G,SACA;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYF,KAAK,CAACG,KAAN,CAAYC,SAAxB,EAAmCC,MAAnC,GAA4C,CAA5C,IACI;AACA,KAACL,KAAK,CAACG,KAAN,CAAYC,SAAZ,CAAsBT,QAAtB,CAJL,EAIsC;AAClC,YAAM,IAAIW,KAAJ,CAAU,iCAAiCX,QAAjC,GAA4C,iGAAtD,CAAN;AACH;;AACD,WAAOH,GAAG,CAACQ,KAAD,EAAQ,CAAC,OAAD,EAAU,WAAV,EAAuBL,QAAvB,EAAiC,MAAjC,EAAyCC,EAAzC,CAAR,CAAV;AACH,GATuB,CAAxB;AAUH,CAXD;;AAYA,eAAeF,SAAf","sourcesContent":["import get from 'lodash/get';\r\nimport useQueryWithStore from './useQueryWithStore';\r\n/**\r\n * Call the dataProvider.getOne() method and return the resolved value\r\n * as well as the loading state.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: { loading: true, loaded: false }\r\n * - success: { data: [data from response], loading: false, loaded: true }\r\n * - error: { error: [error from response], loading: false, loaded: true }\r\n *\r\n * This hook will return the cached result when called a second time\r\n * with the same parameters, until the response arrives.\r\n *\r\n * @param resource The resource name, e.g. 'posts'\r\n * @param id The resource identifier, e.g. 123\r\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as { data, error, loading, loaded }.\r\n *\r\n * @example\r\n *\r\n * import { useGetOne } from 'react-admin';\r\n *\r\n * const UserProfile = ({ record }) => {\r\n *     const { data, loading, error } = useGetOne('users', record.id);\r\n *     if (loading) { return <Loading />; }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <div>User {data.username}</div>;\r\n * };\r\n */\r\nvar useGetOne = function (resource, id, options) {\r\n    return useQueryWithStore({ type: 'getOne', resource: resource, payload: { id: id } }, options, function (state) {\r\n        if (\r\n        // resources are registered\r\n        Object.keys(state.admin.resources).length > 0 &&\r\n            // no registered resource mathing the query\r\n            !state.admin.resources[resource]) {\r\n            throw new Error(\"No <Resource> defined for \\\"\" + resource + \"\\\". useGetOne() relies on the Redux store, so it cannot work if you don't include a <Resource>.\");\r\n        }\r\n        return get(state, ['admin', 'resources', resource, 'data', id]);\r\n    });\r\n};\r\nexport default useGetOne;\r\n"]},"metadata":{},"sourceType":"module"}