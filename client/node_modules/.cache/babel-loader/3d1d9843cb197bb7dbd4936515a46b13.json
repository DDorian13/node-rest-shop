{"ast":null,"code":"import { useGetMany } from '../dataProvider';\n/**\r\n * @typedef ReferenceProps\r\n * @type {Object}\r\n * @property {boolean} loading: boolean indicating if the reference is loading\r\n * @property {boolean} loaded: boolean indicating if the reference has loaded\r\n * @property {Object} referenceRecord: the referenced record.\r\n */\n\n/**\r\n * Fetch reference record, and return it when available\r\n *\r\n * The reference prop sould be the name of one of the <Resource> components\r\n * added as <Admin> child.\r\n *\r\n * @example\r\n *\r\n * const { loading, loaded, referenceRecord } = useReference({\r\n *     id: 7,\r\n *     reference: 'users',\r\n * });\r\n *\r\n * @param {Object} option\r\n * @param {string} option.reference The linked resource name\r\n * @param {string} option.id The id of the reference\r\n *\r\n * @returns {ReferenceProps} The reference record\r\n */\n\nexport var useReference = function (_a) {\n  var reference = _a.reference,\n      id = _a.id;\n\n  var _b = useGetMany(reference, [id]),\n      data = _b.data,\n      error = _b.error,\n      loading = _b.loading,\n      loaded = _b.loaded;\n\n  return {\n    referenceRecord: error ? undefined : data[0],\n    error: error,\n    loading: loading,\n    loaded: loaded\n  };\n};\nexport default useReference;","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/ra-core/esm/controller/useReference.js"],"names":["useGetMany","useReference","_a","reference","id","_b","data","error","loading","loaded","referenceRecord","undefined"],"mappings":"AAAA,SAASA,UAAT,QAA2B,iBAA3B;AACA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAIC,YAAY,GAAG,UAAUC,EAAV,EAAc;AACpC,MAAIC,SAAS,GAAGD,EAAE,CAACC,SAAnB;AAAA,MAA8BC,EAAE,GAAGF,EAAE,CAACE,EAAtC;;AACA,MAAIC,EAAE,GAAGL,UAAU,CAACG,SAAD,EAAY,CAACC,EAAD,CAAZ,CAAnB;AAAA,MAAsCE,IAAI,GAAGD,EAAE,CAACC,IAAhD;AAAA,MAAsDC,KAAK,GAAGF,EAAE,CAACE,KAAjE;AAAA,MAAwEC,OAAO,GAAGH,EAAE,CAACG,OAArF;AAAA,MAA8FC,MAAM,GAAGJ,EAAE,CAACI,MAA1G;;AACA,SAAO;AACHC,IAAAA,eAAe,EAAEH,KAAK,GAAGI,SAAH,GAAeL,IAAI,CAAC,CAAD,CADtC;AAEHC,IAAAA,KAAK,EAAEA,KAFJ;AAGHC,IAAAA,OAAO,EAAEA,OAHN;AAIHC,IAAAA,MAAM,EAAEA;AAJL,GAAP;AAMH,CATM;AAUP,eAAeR,YAAf","sourcesContent":["import { useGetMany } from '../dataProvider';\r\n/**\r\n * @typedef ReferenceProps\r\n * @type {Object}\r\n * @property {boolean} loading: boolean indicating if the reference is loading\r\n * @property {boolean} loaded: boolean indicating if the reference has loaded\r\n * @property {Object} referenceRecord: the referenced record.\r\n */\r\n/**\r\n * Fetch reference record, and return it when available\r\n *\r\n * The reference prop sould be the name of one of the <Resource> components\r\n * added as <Admin> child.\r\n *\r\n * @example\r\n *\r\n * const { loading, loaded, referenceRecord } = useReference({\r\n *     id: 7,\r\n *     reference: 'users',\r\n * });\r\n *\r\n * @param {Object} option\r\n * @param {string} option.reference The linked resource name\r\n * @param {string} option.id The id of the reference\r\n *\r\n * @returns {ReferenceProps} The reference record\r\n */\r\nexport var useReference = function (_a) {\r\n    var reference = _a.reference, id = _a.id;\r\n    var _b = useGetMany(reference, [id]), data = _b.data, error = _b.error, loading = _b.loading, loaded = _b.loaded;\r\n    return {\r\n        referenceRecord: error ? undefined : data[0],\r\n        error: error,\r\n        loading: loading,\r\n        loaded: loaded,\r\n    };\r\n};\r\nexport default useReference;\r\n"]},"metadata":{},"sourceType":"module"}