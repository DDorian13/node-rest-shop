{"ast":null,"code":"import get from 'lodash/get';\nimport { linkToRecord } from '../../util';\n/**\r\n * Get the link toward the referenced resource\r\n *\r\n * @example\r\n *\r\n * const linkPath = getResourceLinkPath({\r\n *      basePath: '/comments',\r\n *      link: 'edit',\r\n *      reference: 'users',\r\n *      record: {\r\n *          userId: 7\r\n *      },\r\n *      resource: 'comments',\r\n *      source: 'userId',\r\n * });\r\n *\r\n * @param {Object} option\r\n * @param {string} option.basePath basepath to current resource\r\n * @param {string | false | LinkToFunctionType} option.link=\"edit\" The link toward the referenced record. 'edit', 'show' or false for no link (default to edit). Alternatively a function that returns a string\r\n * @param {string | false | LinkToFunctionType} [option.linkType] DEPRECATED : old name for link\r\n * @param {string} option.reference The linked resource name\r\n * @param {Object} option.record The The current resource record\r\n * @param {string} option.resource The current resource name\r\n * @param {string} option.source The key of the linked resource identifier\r\n *\r\n * @returns {string | false} The reference props\r\n */\n\nvar getResourceLinkPath = function (_a) {\n  var basePath = _a.basePath,\n      _b = _a.link,\n      link = _b === void 0 ? 'edit' : _b,\n      linkType = _a.linkType,\n      reference = _a.reference,\n      _c = _a.record,\n      record = _c === void 0 ? {\n    id: ''\n  } : _c,\n      resource = _a.resource,\n      source = _a.source;\n  var sourceId = get(record, source);\n  var rootPath = basePath.replace(resource, reference); // Backward compatibility: keep linkType but with warning\n\n  var getResourceLinkPath = function (linkTo) {\n    return !linkTo ? false : typeof linkTo === 'function' ? linkTo(record, reference) : linkToRecord(rootPath, sourceId, linkTo);\n  };\n\n  if (linkType !== undefined) {\n    console.warn(\"The 'linkType' prop is deprecated and should be named to 'link' in <ReferenceField />\");\n  }\n\n  var resourceLinkPath = getResourceLinkPath(linkType !== undefined ? linkType : link);\n  return resourceLinkPath;\n};\n\nexport default getResourceLinkPath;","map":{"version":3,"sources":["C:/Users/Felhasználó/IdeaProjects/node-rest-shop/client/node_modules/ra-core/esm/controller/field/getResourceLinkPath.js"],"names":["get","linkToRecord","getResourceLinkPath","_a","basePath","_b","link","linkType","reference","_c","record","id","resource","source","sourceId","rootPath","replace","linkTo","undefined","console","warn","resourceLinkPath"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAIC,mBAAmB,GAAG,UAAUC,EAAV,EAAc;AACpC,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,EAAE,GAAGF,EAAE,CAACG,IAApC;AAAA,MAA0CA,IAAI,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,MAAhB,GAAyBA,EAA1E;AAAA,MAA8EE,QAAQ,GAAGJ,EAAE,CAACI,QAA5F;AAAA,MAAsGC,SAAS,GAAGL,EAAE,CAACK,SAArH;AAAA,MAAgIC,EAAE,GAAGN,EAAE,CAACO,MAAxI;AAAA,MAAgJA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB;AAAEE,IAAAA,EAAE,EAAE;AAAN,GAAhB,GAA6BF,EAAtL;AAAA,MAA0LG,QAAQ,GAAGT,EAAE,CAACS,QAAxM;AAAA,MAAkNC,MAAM,GAAGV,EAAE,CAACU,MAA9N;AACA,MAAIC,QAAQ,GAAGd,GAAG,CAACU,MAAD,EAASG,MAAT,CAAlB;AACA,MAAIE,QAAQ,GAAGX,QAAQ,CAACY,OAAT,CAAiBJ,QAAjB,EAA2BJ,SAA3B,CAAf,CAHoC,CAIpC;;AACA,MAAIN,mBAAmB,GAAG,UAAUe,MAAV,EAAkB;AACxC,WAAO,CAACA,MAAD,GACD,KADC,GAED,OAAOA,MAAP,KAAkB,UAAlB,GACIA,MAAM,CAACP,MAAD,EAASF,SAAT,CADV,GAEIP,YAAY,CAACc,QAAD,EAAWD,QAAX,EAAqBG,MAArB,CAJtB;AAKH,GAND;;AAOA,MAAIV,QAAQ,KAAKW,SAAjB,EAA4B;AACxBC,IAAAA,OAAO,CAACC,IAAR,CAAa,uFAAb;AACH;;AACD,MAAIC,gBAAgB,GAAGnB,mBAAmB,CAACK,QAAQ,KAAKW,SAAb,GAAyBX,QAAzB,GAAoCD,IAArC,CAA1C;AACA,SAAOe,gBAAP;AACH,CAjBD;;AAkBA,eAAenB,mBAAf","sourcesContent":["import get from 'lodash/get';\r\nimport { linkToRecord } from '../../util';\r\n/**\r\n * Get the link toward the referenced resource\r\n *\r\n * @example\r\n *\r\n * const linkPath = getResourceLinkPath({\r\n *      basePath: '/comments',\r\n *      link: 'edit',\r\n *      reference: 'users',\r\n *      record: {\r\n *          userId: 7\r\n *      },\r\n *      resource: 'comments',\r\n *      source: 'userId',\r\n * });\r\n *\r\n * @param {Object} option\r\n * @param {string} option.basePath basepath to current resource\r\n * @param {string | false | LinkToFunctionType} option.link=\"edit\" The link toward the referenced record. 'edit', 'show' or false for no link (default to edit). Alternatively a function that returns a string\r\n * @param {string | false | LinkToFunctionType} [option.linkType] DEPRECATED : old name for link\r\n * @param {string} option.reference The linked resource name\r\n * @param {Object} option.record The The current resource record\r\n * @param {string} option.resource The current resource name\r\n * @param {string} option.source The key of the linked resource identifier\r\n *\r\n * @returns {string | false} The reference props\r\n */\r\nvar getResourceLinkPath = function (_a) {\r\n    var basePath = _a.basePath, _b = _a.link, link = _b === void 0 ? 'edit' : _b, linkType = _a.linkType, reference = _a.reference, _c = _a.record, record = _c === void 0 ? { id: '' } : _c, resource = _a.resource, source = _a.source;\r\n    var sourceId = get(record, source);\r\n    var rootPath = basePath.replace(resource, reference);\r\n    // Backward compatibility: keep linkType but with warning\r\n    var getResourceLinkPath = function (linkTo) {\r\n        return !linkTo\r\n            ? false\r\n            : typeof linkTo === 'function'\r\n                ? linkTo(record, reference)\r\n                : linkToRecord(rootPath, sourceId, linkTo);\r\n    };\r\n    if (linkType !== undefined) {\r\n        console.warn(\"The 'linkType' prop is deprecated and should be named to 'link' in <ReferenceField />\");\r\n    }\r\n    var resourceLinkPath = getResourceLinkPath(linkType !== undefined ? linkType : link);\r\n    return resourceLinkPath;\r\n};\r\nexport default getResourceLinkPath;\r\n"]},"metadata":{},"sourceType":"module"}