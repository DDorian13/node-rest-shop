{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport useDataProvider from './useDataProviderWithDeclarativeSideEffects';\n/**\r\n * Higher-order component for fetching the dataProvider\r\n *\r\n * Injects a dataProvider object, which behaves just like the real dataProvider\r\n * (same methods returning a Promise). But it's actually a Proxy object, which\r\n * dispatches Redux actions along the process. The benefit is that react-admin\r\n * tracks the loading state when using this hook, and stores results in the\r\n * Redux store for future use.\r\n *\r\n * In addition to the 2 usual parameters of the dataProvider methods (resource,\r\n * payload), the Proxy supports a third parameter for every call. It's an\r\n * object literal which may contain side effects, or make the action optimistic\r\n * (with undoable: true).\r\n *\r\n * @see useDataProvider\r\n *\r\n * @example\r\n *\r\n * import { withDataProvider, showNotification } from 'react-admin';\r\n *\r\n * class PostList extends Component {\r\n *     state = {\r\n *         posts: [],\r\n *     }\r\n *\r\n *     componentDidMount() {\r\n *         const { dataProvider, dispatch } = this.props;\r\n *         dataProvider.getList('posts', { filter: { status: 'pending' }})\r\n *            .then(({ data: posts }) => this.setState({ posts }))\r\n *            .catch(error => dispatch(showNotification(error.message, 'error')))\r\n *     }\r\n *\r\n *     render() {\r\n *         const { posts } = this.state;\r\n *         return (\r\n *            <Fragment>\r\n *                {posts.map((post, key) => <PostDetail post={post} key={key} />)}\r\n *            </Fragment>\r\n *         );\r\n *     }\r\n * }\r\n *\r\n * PostList.propTypes = {\r\n *     dataProvider: PropTypes.func.isRequired,\r\n * };\r\n *\r\n * export default withDataProvider(PostList);\r\n */\n\nvar withDataProvider = function (Component) {\n  return function (props) {\n    return React.createElement(Component, __assign({}, props, {\n      dataProvider: useDataProvider()\n    }));\n  };\n};\n\nexport default withDataProvider;","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/ra-core/esm/dataProvider/withDataProvider.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useDataProvider","withDataProvider","Component","props","createElement","dataProvider"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAO,KAAKO,KAAZ,MAAuB,OAAvB;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,IAAIC,gBAAgB,GAAG,UAAUC,SAAV,EAAqB;AAAE,SAAO,UAAUC,KAAV,EAAiB;AAAE,WAAQJ,KAAK,CAACK,aAAN,CAAoBF,SAApB,EAA+BjB,QAAQ,CAAC,EAAD,EAAKkB,KAAL,EAAY;AAAEE,MAAAA,YAAY,EAAEL,eAAe;AAA/B,KAAZ,CAAvC,CAAR;AAAoG,GAA9H;AAAiI,CAA/K;;AACA,eAAeC,gBAAf","sourcesContent":["var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport * as React from 'react';\r\nimport useDataProvider from './useDataProviderWithDeclarativeSideEffects';\r\n/**\r\n * Higher-order component for fetching the dataProvider\r\n *\r\n * Injects a dataProvider object, which behaves just like the real dataProvider\r\n * (same methods returning a Promise). But it's actually a Proxy object, which\r\n * dispatches Redux actions along the process. The benefit is that react-admin\r\n * tracks the loading state when using this hook, and stores results in the\r\n * Redux store for future use.\r\n *\r\n * In addition to the 2 usual parameters of the dataProvider methods (resource,\r\n * payload), the Proxy supports a third parameter for every call. It's an\r\n * object literal which may contain side effects, or make the action optimistic\r\n * (with undoable: true).\r\n *\r\n * @see useDataProvider\r\n *\r\n * @example\r\n *\r\n * import { withDataProvider, showNotification } from 'react-admin';\r\n *\r\n * class PostList extends Component {\r\n *     state = {\r\n *         posts: [],\r\n *     }\r\n *\r\n *     componentDidMount() {\r\n *         const { dataProvider, dispatch } = this.props;\r\n *         dataProvider.getList('posts', { filter: { status: 'pending' }})\r\n *            .then(({ data: posts }) => this.setState({ posts }))\r\n *            .catch(error => dispatch(showNotification(error.message, 'error')))\r\n *     }\r\n *\r\n *     render() {\r\n *         const { posts } = this.state;\r\n *         return (\r\n *            <Fragment>\r\n *                {posts.map((post, key) => <PostDetail post={post} key={key} />)}\r\n *            </Fragment>\r\n *         );\r\n *     }\r\n * }\r\n *\r\n * PostList.propTypes = {\r\n *     dataProvider: PropTypes.func.isRequired,\r\n * };\r\n *\r\n * export default withDataProvider(PostList);\r\n */\r\nvar withDataProvider = function (Component) { return function (props) { return (React.createElement(Component, __assign({}, props, { dataProvider: useDataProvider() }))); }; };\r\nexport default withDataProvider;\r\n"]},"metadata":{},"sourceType":"module"}