{"ast":null,"code":"import customKeysDataProvider from 'ra-data-rest-client';\nimport { fetchUtils } from \"react-admin\";\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) {\n    options.headers = new Headers({\n      Accept: '*/*'\n    });\n  }\n\n  const token = JSON.parse(localStorage.getItem('token'));\n  options.headers.set('Authorization', `Bearer ${token}`);\n  return fetchUtils.fetchJson(url, options);\n};\n\nconst customKeysHash = {\n  'products': '_id',\n  'orders': '_id',\n  'users': '_id'\n};\nconst dataProvider = customKeysDataProvider('http://localhost:5000', customKeysHash, {}, httpClient);\nconst myDataProvider = { ...dataProvider,\n  create: (resource, params) => {\n    if (resource !== 'products' || !params.models.product.productImage) {\n      // fallback to the default implementation\n      return dataProvider.create(resource, params);\n    }\n\n    let formData = new FormData();\n    formData.append('title', params.models.product.title);\n    formData.append('year', params.models.product.year);\n    formData.append('author', params.models.product.author);\n    formData.append('desc', params.models.product.desc);\n    formData.append('productImage', params.models.product.productImage);\n    return httpClient(`${servicesHost}/${resource}`, {\n      method: 'POST',\n      body: formData\n    }).then(({\n      json\n    }) => ({\n      data: { ...params.data,\n        id: json.id\n      }\n    }));\n  }\n};\nexport default myDataProvider;","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/src/myDataProvider.js"],"names":["customKeysDataProvider","fetchUtils","httpClient","url","options","headers","Headers","Accept","token","JSON","parse","localStorage","getItem","set","fetchJson","customKeysHash","dataProvider","myDataProvider","create","resource","params","models","product","productImage","formData","FormData","append","title","year","author","desc","servicesHost","method","body","then","json","data","id"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,qBAAnC;AACA,SAAQC,UAAR,QAAyB,aAAzB;;AAEA,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,OAAO,GAAG,EAAhB,KAAuB;AACtC,MAAI,CAACA,OAAO,CAACC,OAAb,EAAsB;AAClBD,IAAAA,OAAO,CAACC,OAAR,GAAkB,IAAIC,OAAJ,CAAY;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAZ,CAAlB;AACH;;AACD,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAd;AACAR,EAAAA,OAAO,CAACC,OAAR,CAAgBQ,GAAhB,CAAoB,eAApB,EAAsC,UAASL,KAAM,EAArD;AACA,SAAOP,UAAU,CAACa,SAAX,CAAqBX,GAArB,EAA0BC,OAA1B,CAAP;AACH,CAPD;;AASA,MAAMW,cAAc,GAAG;AACnB,cAAY,KADO;AAEnB,YAAU,KAFS;AAGnB,WAAS;AAHU,CAAvB;AAMA,MAAMC,YAAY,GAAGhB,sBAAsB,CAAC,uBAAD,EAA0Be,cAA1B,EAA0C,EAA1C,EAA8Cb,UAA9C,CAA3C;AAEA,MAAMe,cAAc,GAAG,EACnB,GAAGD,YADgB;AAEnBE,EAAAA,MAAM,EAAE,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAC1B,QAAID,QAAQ,KAAK,UAAb,IAA2B,CAACC,MAAM,CAACC,MAAP,CAAcC,OAAd,CAAsBC,YAAtD,EAAoE;AAChE;AACA,aAAOP,YAAY,CAACE,MAAb,CAAoBC,QAApB,EAA8BC,MAA9B,CAAP;AACH;;AAED,QAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AAEAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBN,MAAM,CAACC,MAAP,CAAcC,OAAd,CAAsBK,KAA/C;AACAH,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBN,MAAM,CAACC,MAAP,CAAcC,OAAd,CAAsBM,IAA9C;AACAJ,IAAAA,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0BN,MAAM,CAACC,MAAP,CAAcC,OAAd,CAAsBO,MAAhD;AACAL,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBN,MAAM,CAACC,MAAP,CAAcC,OAAd,CAAsBQ,IAA9C;AACAN,IAAAA,QAAQ,CAACE,MAAT,CAAgB,cAAhB,EAAgCN,MAAM,CAACC,MAAP,CAAcC,OAAd,CAAsBC,YAAtD;AAEA,WAAOrB,UAAU,CAAE,GAAE6B,YAAa,IAAGZ,QAAS,EAA7B,EAAgC;AAC7Ca,MAAAA,MAAM,EAAE,MADqC;AAE7CC,MAAAA,IAAI,EAAET;AAFuC,KAAhC,CAAV,CAGJU,IAHI,CAGC,CAAC;AAAEC,MAAAA;AAAF,KAAD,MAAe;AACnBC,MAAAA,IAAI,EAAE,EAAE,GAAGhB,MAAM,CAACgB,IAAZ;AAAkBC,QAAAA,EAAE,EAAEF,IAAI,CAACE;AAA3B;AADa,KAAf,CAHD,CAAP;AAMH;AAtBkB,CAAvB;AAyBA,eAAepB,cAAf","sourcesContent":["import customKeysDataProvider from 'ra-data-rest-client';\r\nimport {fetchUtils} from \"react-admin\";\r\n\r\nconst httpClient = (url, options = {}) => {\r\n    if (!options.headers) {\r\n        options.headers = new Headers({ Accept: '*/*' });\r\n    }\r\n    const token = JSON.parse(localStorage.getItem('token'));\r\n    options.headers.set('Authorization', `Bearer ${token}`);\r\n    return fetchUtils.fetchJson(url, options);\r\n};\r\n\r\nconst customKeysHash = {\r\n    'products': '_id',\r\n    'orders': '_id',\r\n    'users': '_id'\r\n}\r\n\r\nconst dataProvider = customKeysDataProvider('http://localhost:5000', customKeysHash, {}, httpClient);\r\n\r\nconst myDataProvider = {\r\n    ...dataProvider,\r\n    create: (resource, params) => {\r\n        if (resource !== 'products' || !params.models.product.productImage) {\r\n            // fallback to the default implementation\r\n            return dataProvider.create(resource, params);\r\n        }\r\n\r\n        let formData = new FormData();\r\n\r\n        formData.append('title', params.models.product.title);\r\n        formData.append('year', params.models.product.year);\r\n        formData.append('author', params.models.product.author);\r\n        formData.append('desc', params.models.product.desc);\r\n        formData.append('productImage', params.models.product.productImage);\r\n\r\n        return httpClient(`${servicesHost}/${resource}`, {\r\n            method: 'POST',\r\n            body: formData,\r\n        }).then(({ json }) => ({\r\n            data: { ...params.data, id: json.id },\r\n        }));\r\n    }\r\n};\r\n\r\nexport default myDataProvider;"]},"metadata":{},"sourceType":"module"}