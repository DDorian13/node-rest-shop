{"ast":null,"code":"import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { clearState } from '../actions/clearActions';\nimport { useHistory } from 'react-router-dom';\n/**\r\n * Get a callback for calling the authProvider.logout() method,\r\n * redirect to the login page, and clear the Redux state.\r\n *\r\n * @see useAuthProvider\r\n *\r\n * @returns {Function} logout callback\r\n *\r\n * @example\r\n *\r\n * import { useLogout } from 'react-admin';\r\n *\r\n * const LogoutButton = () => {\r\n *     const logout = useLogout();\r\n *     const handleClick = () => logout();\r\n *     return <button onClick={handleClick}>Logout</button>;\r\n * }\r\n */\n\nvar useLogout = function () {\n  var authProvider = useAuthProvider();\n  var dispatch = useDispatch();\n  /**\r\n   * We need the current location to pass in the router state\r\n   * so that the login hook knows where to redirect to as next route after login.\r\n   *\r\n   * But if we used useLocation to get it, the logout function\r\n   * would be rebuilt each time the user changes location. Consequently, that\r\n   * would force a rerender of all components using this hook upon navigation\r\n   * (CoreAdminRouter for example).\r\n   *\r\n   * To avoid that, we read the location directly from history which is mutable.\r\n   * See: https://reacttraining.com/react-router/web/api/history/history-is-mutable\r\n   */\n\n  var history = useHistory();\n  var logout = useCallback(function (params, redirectTo, redirectToCurrentLocationAfterLogin) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (redirectTo === void 0) {\n      redirectTo = defaultAuthParams.loginUrl;\n    }\n\n    if (redirectToCurrentLocationAfterLogin === void 0) {\n      redirectToCurrentLocationAfterLogin = true;\n    }\n\n    return authProvider.logout(params).then(function (redirectToFromProvider) {\n      dispatch(clearState()); // redirectTo can contain a query string, e.g '/login?foo=bar'\n      // we must split the redirectTo to pass a structured location to history.push()\n\n      var redirectToParts = (redirectToFromProvider || redirectTo).split('?');\n      var newLocation = {\n        pathname: redirectToParts[0]\n      };\n\n      if (redirectToCurrentLocationAfterLogin && history.location && history.location.pathname) {\n        newLocation.state = {\n          nextPathname: history.location.pathname\n        };\n      }\n\n      if (redirectToParts[1]) {\n        newLocation.search = redirectToParts[1];\n      }\n\n      history.push(newLocation);\n      return redirectToFromProvider;\n    });\n  }, [authProvider, history, dispatch]);\n  var logoutWithoutProvider = useCallback(function (_) {\n    history.push({\n      pathname: defaultAuthParams.loginUrl,\n      state: {\n        nextPathname: history.location && history.location.pathname\n      }\n    });\n    dispatch(clearState());\n    return Promise.resolve();\n  }, [dispatch, history]);\n  return authProvider ? logout : logoutWithoutProvider;\n};\n\nexport default useLogout;","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/ra-core/esm/auth/useLogout.js"],"names":["useCallback","useDispatch","useAuthProvider","defaultAuthParams","clearState","useHistory","useLogout","authProvider","dispatch","history","logout","params","redirectTo","redirectToCurrentLocationAfterLogin","loginUrl","then","redirectToFromProvider","redirectToParts","split","newLocation","pathname","location","state","nextPathname","search","push","logoutWithoutProvider","_","Promise","resolve"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,eAAP,IAA0BC,iBAA1B,QAAmD,mBAAnD;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA;;;;;;;;;;;;;;;;;;;AAkBA,IAAIC,SAAS,GAAG,YAAY;AACxB,MAAIC,YAAY,GAAGL,eAAe,EAAlC;AACA,MAAIM,QAAQ,GAAGP,WAAW,EAA1B;AACA;;;;;;;;;;;;;AAYA,MAAIQ,OAAO,GAAGJ,UAAU,EAAxB;AACA,MAAIK,MAAM,GAAGV,WAAW,CAAC,UAAUW,MAAV,EAAkBC,UAAlB,EAA8BC,mCAA9B,EAAmE;AACxF,QAAIF,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,EAAT;AAAc;;AACvC,QAAIC,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAEA,MAAAA,UAAU,GAAGT,iBAAiB,CAACW,QAA/B;AAA0C;;AACvE,QAAID,mCAAmC,KAAK,KAAK,CAAjD,EAAoD;AAAEA,MAAAA,mCAAmC,GAAG,IAAtC;AAA6C;;AACnG,WAAON,YAAY,CAACG,MAAb,CAAoBC,MAApB,EAA4BI,IAA5B,CAAiC,UAAUC,sBAAV,EAAkC;AACtER,MAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR,CADsE,CAEtE;AACA;;AACA,UAAIa,eAAe,GAAG,CAACD,sBAAsB,IAAIJ,UAA3B,EAAuCM,KAAvC,CAA6C,GAA7C,CAAtB;AACA,UAAIC,WAAW,GAAG;AACdC,QAAAA,QAAQ,EAAEH,eAAe,CAAC,CAAD;AADX,OAAlB;;AAGA,UAAIJ,mCAAmC,IACnCJ,OAAO,CAACY,QADR,IAEAZ,OAAO,CAACY,QAAR,CAAiBD,QAFrB,EAE+B;AAC3BD,QAAAA,WAAW,CAACG,KAAZ,GAAoB;AAChBC,UAAAA,YAAY,EAAEd,OAAO,CAACY,QAAR,CAAiBD;AADf,SAApB;AAGH;;AACD,UAAIH,eAAe,CAAC,CAAD,CAAnB,EAAwB;AACpBE,QAAAA,WAAW,CAACK,MAAZ,GAAqBP,eAAe,CAAC,CAAD,CAApC;AACH;;AACDR,MAAAA,OAAO,CAACgB,IAAR,CAAaN,WAAb;AACA,aAAOH,sBAAP;AACH,KApBM,CAAP;AAqBH,GAzBuB,EAyBrB,CAACT,YAAD,EAAeE,OAAf,EAAwBD,QAAxB,CAzBqB,CAAxB;AA0BA,MAAIkB,qBAAqB,GAAG1B,WAAW,CAAC,UAAU2B,CAAV,EAAa;AACjDlB,IAAAA,OAAO,CAACgB,IAAR,CAAa;AACTL,MAAAA,QAAQ,EAAEjB,iBAAiB,CAACW,QADnB;AAETQ,MAAAA,KAAK,EAAE;AACHC,QAAAA,YAAY,EAAEd,OAAO,CAACY,QAAR,IAAoBZ,OAAO,CAACY,QAAR,CAAiBD;AADhD;AAFE,KAAb;AAMAZ,IAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACA,WAAOwB,OAAO,CAACC,OAAR,EAAP;AACH,GATsC,EASpC,CAACrB,QAAD,EAAWC,OAAX,CAToC,CAAvC;AAUA,SAAOF,YAAY,GAAGG,MAAH,GAAYgB,qBAA/B;AACH,CArDD;;AAsDA,eAAepB,SAAf","sourcesContent":["import { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\r\nimport { clearState } from '../actions/clearActions';\r\nimport { useHistory } from 'react-router-dom';\r\n/**\r\n * Get a callback for calling the authProvider.logout() method,\r\n * redirect to the login page, and clear the Redux state.\r\n *\r\n * @see useAuthProvider\r\n *\r\n * @returns {Function} logout callback\r\n *\r\n * @example\r\n *\r\n * import { useLogout } from 'react-admin';\r\n *\r\n * const LogoutButton = () => {\r\n *     const logout = useLogout();\r\n *     const handleClick = () => logout();\r\n *     return <button onClick={handleClick}>Logout</button>;\r\n * }\r\n */\r\nvar useLogout = function () {\r\n    var authProvider = useAuthProvider();\r\n    var dispatch = useDispatch();\r\n    /**\r\n     * We need the current location to pass in the router state\r\n     * so that the login hook knows where to redirect to as next route after login.\r\n     *\r\n     * But if we used useLocation to get it, the logout function\r\n     * would be rebuilt each time the user changes location. Consequently, that\r\n     * would force a rerender of all components using this hook upon navigation\r\n     * (CoreAdminRouter for example).\r\n     *\r\n     * To avoid that, we read the location directly from history which is mutable.\r\n     * See: https://reacttraining.com/react-router/web/api/history/history-is-mutable\r\n     */\r\n    var history = useHistory();\r\n    var logout = useCallback(function (params, redirectTo, redirectToCurrentLocationAfterLogin) {\r\n        if (params === void 0) { params = {}; }\r\n        if (redirectTo === void 0) { redirectTo = defaultAuthParams.loginUrl; }\r\n        if (redirectToCurrentLocationAfterLogin === void 0) { redirectToCurrentLocationAfterLogin = true; }\r\n        return authProvider.logout(params).then(function (redirectToFromProvider) {\r\n            dispatch(clearState());\r\n            // redirectTo can contain a query string, e.g '/login?foo=bar'\r\n            // we must split the redirectTo to pass a structured location to history.push()\r\n            var redirectToParts = (redirectToFromProvider || redirectTo).split('?');\r\n            var newLocation = {\r\n                pathname: redirectToParts[0],\r\n            };\r\n            if (redirectToCurrentLocationAfterLogin &&\r\n                history.location &&\r\n                history.location.pathname) {\r\n                newLocation.state = {\r\n                    nextPathname: history.location.pathname,\r\n                };\r\n            }\r\n            if (redirectToParts[1]) {\r\n                newLocation.search = redirectToParts[1];\r\n            }\r\n            history.push(newLocation);\r\n            return redirectToFromProvider;\r\n        });\r\n    }, [authProvider, history, dispatch]);\r\n    var logoutWithoutProvider = useCallback(function (_) {\r\n        history.push({\r\n            pathname: defaultAuthParams.loginUrl,\r\n            state: {\r\n                nextPathname: history.location && history.location.pathname,\r\n            },\r\n        });\r\n        dispatch(clearState());\r\n        return Promise.resolve();\r\n    }, [dispatch, history]);\r\n    return authProvider ? logout : logoutWithoutProvider;\r\n};\r\nexport default useLogout;\r\n"]},"metadata":{},"sourceType":"module"}