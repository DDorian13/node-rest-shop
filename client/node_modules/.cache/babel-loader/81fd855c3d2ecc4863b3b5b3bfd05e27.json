{"ast":null,"code":"/*!\r\n * inflection\r\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\r\n * MIT Licensed\r\n *\r\n * @fileoverview\r\n * A port of inflection-js to node.js module.\r\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.inflection = factory();\n  }\n})(this, function () {\n  /**\r\n   * @description This is a list of nouns that use the same form for both singular and plural.\r\n   *              This list should remain entirely in lower case to correctly match Strings.\r\n   * @private\r\n   */\n  var uncountable_words = [// 'access',\n  'accommodation', 'adulthood', 'advertising', 'advice', 'aggression', 'aid', 'air', 'aircraft', 'alcohol', 'anger', 'applause', 'arithmetic', // 'art',\n  'assistance', 'athletics', // 'attention',\n  'bacon', 'baggage', // 'ballet',\n  // 'beauty',\n  'beef', // 'beer',\n  // 'behavior',\n  'biology', // 'billiards',\n  'blood', 'botany', // 'bowels',\n  'bread', // 'business',\n  'butter', 'carbon', 'cardboard', 'cash', 'chalk', 'chaos', 'chess', 'crossroads', 'countryside', // 'damage',\n  'dancing', // 'danger',\n  'deer', // 'delight',\n  // 'dessert',\n  'dignity', 'dirt', // 'distribution',\n  'dust', 'economics', 'education', 'electricity', // 'employment',\n  // 'energy',\n  'engineering', 'enjoyment', // 'entertainment',\n  'envy', 'equipment', 'ethics', 'evidence', 'evolution', // 'failure',\n  // 'faith',\n  'fame', 'fiction', // 'fish',\n  'flour', 'flu', 'food', // 'freedom',\n  // 'fruit',\n  'fuel', 'fun', // 'funeral',\n  'furniture', 'gallows', 'garbage', 'garlic', // 'gas',\n  'genetics', // 'glass',\n  'gold', 'golf', 'gossip', 'grammar', // 'grass',\n  'gratitude', 'grief', // 'ground',\n  'guilt', 'gymnastics', // 'hair',\n  'happiness', 'hardware', 'harm', 'hate', 'hatred', 'health', 'heat', // 'height',\n  'help', 'homework', 'honesty', 'honey', 'hospitality', 'housework', 'humour', 'hunger', 'hydrogen', 'ice', 'importance', 'inflation', 'information', // 'injustice',\n  'innocence', // 'intelligence',\n  'iron', 'irony', 'jam', // 'jealousy',\n  // 'jelly',\n  'jewelry', // 'joy',\n  'judo', // 'juice',\n  // 'justice',\n  'karate', // 'kindness',\n  'knowledge', // 'labour',\n  'lack', // 'land',\n  'laughter', 'lava', 'leather', 'leisure', 'lightning', 'linguine', 'linguini', 'linguistics', 'literature', 'litter', 'livestock', 'logic', 'loneliness', // 'love',\n  'luck', 'luggage', 'macaroni', 'machinery', 'magic', // 'mail',\n  'management', 'mankind', 'marble', 'mathematics', 'mayonnaise', 'measles', // 'meat',\n  // 'metal',\n  'methane', 'milk', 'minus', 'money', // 'moose',\n  'mud', 'music', 'mumps', 'nature', 'news', 'nitrogen', 'nonsense', 'nurture', 'nutrition', 'obedience', 'obesity', // 'oil',\n  'oxygen', // 'paper',\n  // 'passion',\n  'pasta', 'patience', // 'permission',\n  'physics', 'poetry', 'pollution', 'poverty', // 'power',\n  'pride', // 'production',\n  // 'progress',\n  // 'pronunciation',\n  'psychology', 'publicity', 'punctuation', // 'quality',\n  // 'quantity',\n  'quartz', 'racism', // 'rain',\n  // 'recreation',\n  'relaxation', 'reliability', 'research', 'respect', 'revenge', 'rice', 'rubbish', 'rum', 'safety', // 'salad',\n  // 'salt',\n  // 'sand',\n  // 'satire',\n  'scenery', 'seafood', 'seaside', 'series', 'shame', 'sheep', 'shopping', // 'silence',\n  'sleep', // 'slang'\n  'smoke', 'smoking', 'snow', 'soap', 'software', 'soil', // 'sorrow',\n  // 'soup',\n  'spaghetti', // 'speed',\n  'species', // 'spelling',\n  // 'sport',\n  'steam', // 'strength',\n  'stuff', 'stupidity', // 'success',\n  // 'sugar',\n  'sunshine', 'symmetry', // 'tea',\n  'tennis', 'thirst', 'thunder', 'timber', // 'time',\n  // 'toast',\n  // 'tolerance',\n  // 'trade',\n  'traffic', 'transportation', // 'travel',\n  'trust', // 'understanding',\n  'underwear', 'unemployment', 'unity', // 'usage',\n  'validity', 'veal', 'vegetation', 'vegetarianism', 'vengeance', 'violence', // 'vision',\n  'vitality', 'warmth', // 'water',\n  'wealth', 'weather', // 'weight',\n  'welfare', 'wheat', // 'whiskey',\n  // 'width',\n  'wildlife', // 'wine',\n  'wisdom', // 'wood',\n  // 'wool',\n  // 'work',\n  // 'yeast',\n  'yoga', 'zinc', 'zoology'];\n  /**\r\n   * @description These rules translate from the singular form of a noun to its plural form.\r\n   * @private\r\n   */\n\n  var regex = {\n    plural: {\n      men: new RegExp('^(m|wom)en$', 'gi'),\n      people: new RegExp('(pe)ople$', 'gi'),\n      children: new RegExp('(child)ren$', 'gi'),\n      tia: new RegExp('([ti])a$', 'gi'),\n      analyses: new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi'),\n      hives: new RegExp('(hi|ti)ves$', 'gi'),\n      curves: new RegExp('(curve)s$', 'gi'),\n      lrves: new RegExp('([lr])ves$', 'gi'),\n      aves: new RegExp('([a])ves$', 'gi'),\n      foves: new RegExp('([^fo])ves$', 'gi'),\n      movies: new RegExp('(m)ovies$', 'gi'),\n      aeiouyies: new RegExp('([^aeiouy]|qu)ies$', 'gi'),\n      series: new RegExp('(s)eries$', 'gi'),\n      xes: new RegExp('(x|ch|ss|sh)es$', 'gi'),\n      mice: new RegExp('([m|l])ice$', 'gi'),\n      buses: new RegExp('(bus)es$', 'gi'),\n      oes: new RegExp('(o)es$', 'gi'),\n      shoes: new RegExp('(shoe)s$', 'gi'),\n      crises: new RegExp('(cris|ax|test)es$', 'gi'),\n      octopi: new RegExp('(octop|vir)i$', 'gi'),\n      aliases: new RegExp('(alias|canvas|status|campus)es$', 'gi'),\n      summonses: new RegExp('^(summons)es$', 'gi'),\n      oxen: new RegExp('^(ox)en', 'gi'),\n      matrices: new RegExp('(matr)ices$', 'gi'),\n      vertices: new RegExp('(vert|ind)ices$', 'gi'),\n      feet: new RegExp('^feet$', 'gi'),\n      teeth: new RegExp('^teeth$', 'gi'),\n      geese: new RegExp('^geese$', 'gi'),\n      quizzes: new RegExp('(quiz)zes$', 'gi'),\n      whereases: new RegExp('^(whereas)es$', 'gi'),\n      criteria: new RegExp('^(criteri)a$', 'gi'),\n      genera: new RegExp('^genera$', 'gi'),\n      ss: new RegExp('ss$', 'gi'),\n      s: new RegExp('s$', 'gi')\n    },\n    singular: {\n      man: new RegExp('^(m|wom)an$', 'gi'),\n      person: new RegExp('(pe)rson$', 'gi'),\n      child: new RegExp('(child)$', 'gi'),\n      ox: new RegExp('^(ox)$', 'gi'),\n      axis: new RegExp('(ax|test)is$', 'gi'),\n      octopus: new RegExp('(octop|vir)us$', 'gi'),\n      alias: new RegExp('(alias|status|canvas|campus)$', 'gi'),\n      summons: new RegExp('^(summons)$', 'gi'),\n      bus: new RegExp('(bu)s$', 'gi'),\n      buffalo: new RegExp('(buffal|tomat|potat)o$', 'gi'),\n      tium: new RegExp('([ti])um$', 'gi'),\n      sis: new RegExp('sis$', 'gi'),\n      ffe: new RegExp('(?:([^f])fe|([lr])f)$', 'gi'),\n      hive: new RegExp('(hi|ti)ve$', 'gi'),\n      aeiouyy: new RegExp('([^aeiouy]|qu)y$', 'gi'),\n      x: new RegExp('(x|ch|ss|sh)$', 'gi'),\n      matrix: new RegExp('(matr)ix$', 'gi'),\n      vertex: new RegExp('(vert|ind)ex$', 'gi'),\n      mouse: new RegExp('([m|l])ouse$', 'gi'),\n      foot: new RegExp('^foot$', 'gi'),\n      tooth: new RegExp('^tooth$', 'gi'),\n      goose: new RegExp('^goose$', 'gi'),\n      quiz: new RegExp('(quiz)$', 'gi'),\n      whereas: new RegExp('^(whereas)$', 'gi'),\n      criterion: new RegExp('^(criteri)on$', 'gi'),\n      genus: new RegExp('^genus$', 'gi'),\n      s: new RegExp('s$', 'gi'),\n      common: new RegExp('$', 'gi')\n    }\n  };\n  var plural_rules = [// do not replace if its already a plural word\n  [regex.plural.men], [regex.plural.people], [regex.plural.children], [regex.plural.tia], [regex.plural.analyses], [regex.plural.hives], [regex.plural.curves], [regex.plural.lrves], [regex.plural.foves], [regex.plural.aeiouyies], [regex.plural.series], [regex.plural.movies], [regex.plural.xes], [regex.plural.mice], [regex.plural.buses], [regex.plural.oes], [regex.plural.shoes], [regex.plural.crises], [regex.plural.octopi], [regex.plural.aliases], [regex.plural.summonses], [regex.plural.oxen], [regex.plural.matrices], [regex.plural.feet], [regex.plural.teeth], [regex.plural.geese], [regex.plural.quizzes], [regex.plural.whereases], [regex.plural.criteria], [regex.plural.genera], // original rule\n  [regex.singular.man, '$1en'], [regex.singular.person, '$1ople'], [regex.singular.child, '$1ren'], [regex.singular.ox, '$1en'], [regex.singular.axis, '$1es'], [regex.singular.octopus, '$1i'], [regex.singular.alias, '$1es'], [regex.singular.summons, '$1es'], [regex.singular.bus, '$1ses'], [regex.singular.buffalo, '$1oes'], [regex.singular.tium, '$1a'], [regex.singular.sis, 'ses'], [regex.singular.ffe, '$1$2ves'], [regex.singular.hive, '$1ves'], [regex.singular.aeiouyy, '$1ies'], [regex.singular.matrix, '$1ices'], [regex.singular.vertex, '$1ices'], [regex.singular.x, '$1es'], [regex.singular.mouse, '$1ice'], [regex.singular.foot, 'feet'], [regex.singular.tooth, 'teeth'], [regex.singular.goose, 'geese'], [regex.singular.quiz, '$1zes'], [regex.singular.whereas, '$1es'], [regex.singular.criterion, '$1a'], [regex.singular.genus, 'genera'], [regex.singular.s, 's'], [regex.singular.common, 's']];\n  /**\r\n   * @description These rules translate from the plural form of a noun to its singular form.\r\n   * @private\r\n   */\n\n  var singular_rules = [// do not replace if its already a singular word\n  [regex.singular.man], [regex.singular.person], [regex.singular.child], [regex.singular.ox], [regex.singular.axis], [regex.singular.octopus], [regex.singular.alias], [regex.singular.summons], [regex.singular.bus], [regex.singular.buffalo], [regex.singular.tium], [regex.singular.sis], [regex.singular.ffe], [regex.singular.hive], [regex.singular.aeiouyy], [regex.singular.x], [regex.singular.matrix], [regex.singular.mouse], [regex.singular.foot], [regex.singular.tooth], [regex.singular.goose], [regex.singular.quiz], [regex.singular.whereas], [regex.singular.criterion], [regex.singular.genus], // original rule\n  [regex.plural.men, '$1an'], [regex.plural.people, '$1rson'], [regex.plural.children, '$1'], [regex.plural.genera, 'genus'], [regex.plural.criteria, '$1on'], [regex.plural.tia, '$1um'], [regex.plural.analyses, '$1$2sis'], [regex.plural.hives, '$1ve'], [regex.plural.curves, '$1'], [regex.plural.lrves, '$1f'], [regex.plural.aves, '$1ve'], [regex.plural.foves, '$1fe'], [regex.plural.movies, '$1ovie'], [regex.plural.aeiouyies, '$1y'], [regex.plural.series, '$1eries'], [regex.plural.xes, '$1'], [regex.plural.mice, '$1ouse'], [regex.plural.buses, '$1'], [regex.plural.oes, '$1'], [regex.plural.shoes, '$1'], [regex.plural.crises, '$1is'], [regex.plural.octopi, '$1us'], [regex.plural.aliases, '$1'], [regex.plural.summonses, '$1'], [regex.plural.oxen, '$1'], [regex.plural.matrices, '$1ix'], [regex.plural.vertices, '$1ex'], [regex.plural.feet, 'foot'], [regex.plural.teeth, 'tooth'], [regex.plural.geese, 'goose'], [regex.plural.quizzes, '$1'], [regex.plural.whereases, '$1'], [regex.plural.ss, 'ss'], [regex.plural.s, '']];\n  /**\r\n   * @description This is a list of words that should not be capitalized for title case.\r\n   * @private\r\n   */\n\n  var non_titlecased_words = ['and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at', 'by', 'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'];\n  /**\r\n   * @description These are regular expressions used for converting between String formats.\r\n   * @private\r\n   */\n\n  var id_suffix = new RegExp('(_ids|_id)$', 'g');\n  var underbar = new RegExp('_', 'g');\n  var space_or_underbar = new RegExp('[\\ _]', 'g');\n  var uppercase = new RegExp('([A-Z])', 'g');\n  var underbar_prefix = new RegExp('^_');\n  var inflector = {\n    /**\r\n     * A helper method that applies rules based replacement to a String.\r\n     * @private\r\n     * @function\r\n     * @param {String} str String to modify and return based on the passed rules.\r\n     * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\r\n     * @param {Array: [String]} skip Strings to skip if they match\r\n     * @param {String} override String to return as though this method succeeded (used to conform to APIs)\r\n     * @returns {String} Return passed String modified by passed rules.\r\n     * @example\r\n     *\r\n     *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\r\n     */\n    _apply_rules: function (str, rules, skip, override) {\n      if (override) {\n        str = override;\n      } else {\n        var ignore = inflector.indexOf(skip, str.toLowerCase()) > -1;\n\n        if (!ignore) {\n          var i = 0;\n          var j = rules.length;\n\n          for (; i < j; i++) {\n            if (str.match(rules[i][0])) {\n              if (rules[i][1] !== undefined) {\n                str = str.replace(rules[i][0], rules[i][1]);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return str;\n    },\n\n    /**\r\n     * This lets us detect if an Array contains a given element.\r\n     * @public\r\n     * @function\r\n     * @param {Array} arr The subject array.\r\n     * @param {Object} item Object to locate in the Array.\r\n     * @param {Number} from_index Starts checking from this position in the Array.(optional)\r\n     * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\r\n     * @returns {Number} Return index position in the Array of the passed item.\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\r\n     *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\r\n     */\n    indexOf: function (arr, item, from_index, compare_func) {\n      if (!from_index) {\n        from_index = -1;\n      }\n\n      var index = -1;\n      var i = from_index;\n      var j = arr.length;\n\n      for (; i < j; i++) {\n        if (arr[i] === item || compare_func && compare_func(arr[i], item)) {\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    },\n\n    /**\r\n     * This function adds pluralization support to every String object.\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @param {String} plural Overrides normal output with said String.(optional)\r\n     * @returns {String} Singular English language nouns are returned in plural form.\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.pluralize( 'person' ); // === 'people'\r\n     *     inflection.pluralize( 'octopus' ); // === 'octopi'\r\n     *     inflection.pluralize( 'Hat' ); // === 'Hats'\r\n     *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\r\n     */\n    pluralize: function (str, plural) {\n      return inflector._apply_rules(str, plural_rules, uncountable_words, plural);\n    },\n\n    /**\r\n     * This function adds singularization support to every String object.\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @param {String} singular Overrides normal output with said String.(optional)\r\n     * @returns {String} Plural English language nouns are returned in singular form.\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.singularize( 'people' ); // === 'person'\r\n     *     inflection.singularize( 'octopi' ); // === 'octopus'\r\n     *     inflection.singularize( 'Hats' ); // === 'Hat'\r\n     *     inflection.singularize( 'guys', 'person' ); // === 'person'\r\n     */\n    singularize: function (str, singular) {\n      return inflector._apply_rules(str, singular_rules, uncountable_words, singular);\n    },\n\n    /**\r\n     * This function will pluralize or singularlize a String appropriately based on an integer value\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @param {Number} count The number to base pluralization off of.\r\n     * @param {String} singular Overrides normal output with said String.(optional)\r\n     * @param {String} plural Overrides normal output with said String.(optional)\r\n     * @returns {String} English language nouns are returned in the plural or singular form based on the count.\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.inflect( 'people' 1 ); // === 'person'\r\n     *     inflection.inflect( 'octopi' 1 ); // === 'octopus'\r\n     *     inflection.inflect( 'Hats' 1 ); // === 'Hat'\r\n     *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'\r\n     *     inflection.inflect( 'person', 2 ); // === 'people'\r\n     *     inflection.inflect( 'octopus', 2 ); // === 'octopi'\r\n     *     inflection.inflect( 'Hat', 2 ); // === 'Hats'\r\n     *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'\r\n     */\n    inflect: function (str, count, singular, plural) {\n      count = parseInt(count, 10);\n      if (isNaN(count)) return str;\n\n      if (count === 0 || count > 1) {\n        return inflector._apply_rules(str, plural_rules, uncountable_words, plural);\n      } else {\n        return inflector._apply_rules(str, singular_rules, uncountable_words, singular);\n      }\n    },\n\n    /**\r\n     * This function adds camelization support to every String object.\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\r\n     *                                 Passing true will lowercase it.\r\n     * @returns {String} Lower case underscored words will be returned in camel case.\r\n     *                  additionally '/' is translated to '::'\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\r\n     *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\r\n     */\n    camelize: function (str, low_first_letter) {\n      var str_path = str.split('/');\n      var i = 0;\n      var j = str_path.length;\n      var str_arr, init_x, k, l, first;\n\n      for (; i < j; i++) {\n        str_arr = str_path[i].split('_');\n        k = 0;\n        l = str_arr.length;\n\n        for (; k < l; k++) {\n          if (k !== 0) {\n            str_arr[k] = str_arr[k].toLowerCase();\n          }\n\n          first = str_arr[k].charAt(0);\n          first = low_first_letter && i === 0 && k === 0 ? first.toLowerCase() : first.toUpperCase();\n          str_arr[k] = first + str_arr[k].substring(1);\n        }\n\n        str_path[i] = str_arr.join('');\n      }\n\n      return str_path.join('::');\n    },\n\n    /**\r\n     * This function adds underscore support to every String object.\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\r\n     *                  Passing true will return as entered.\r\n     * @returns {String} Camel cased words are returned as lower cased and underscored.\r\n     *                  additionally '::' is translated to '/'.\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\r\n     *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\r\n     *     inflection.underscore( 'MP', true ); // === 'MP'\r\n     */\n    underscore: function (str, all_upper_case) {\n      if (all_upper_case && str === str.toUpperCase()) return str;\n      var str_path = str.split('::');\n      var i = 0;\n      var j = str_path.length;\n\n      for (; i < j; i++) {\n        str_path[i] = str_path[i].replace(uppercase, '_$1');\n        str_path[i] = str_path[i].replace(underbar_prefix, '');\n      }\n\n      return str_path.join('/').toLowerCase();\n    },\n\n    /**\r\n     * This function adds humanize support to every String object.\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\r\n     *                                 Passing true will lowercase it.\r\n     * @returns {String} Lower case underscored words will be returned in humanized form.\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.humanize( 'message_properties' ); // === 'Message properties'\r\n     *     inflection.humanize( 'message_properties', true ); // === 'message properties'\r\n     */\n    humanize: function (str, low_first_letter) {\n      str = str.toLowerCase();\n      str = str.replace(id_suffix, '');\n      str = str.replace(underbar, ' ');\n\n      if (!low_first_letter) {\n        str = inflector.capitalize(str);\n      }\n\n      return str;\n    },\n\n    /**\r\n     * This function adds capitalization support to every String object.\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @returns {String} All characters will be lower case and the first will be upper.\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\r\n     *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\r\n     */\n    capitalize: function (str) {\n      str = str.toLowerCase();\n      return str.substring(0, 1).toUpperCase() + str.substring(1);\n    },\n\n    /**\r\n     * This function replaces underscores with dashes in the string.\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @returns {String} Replaces all spaces or underscores with dashes.\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\r\n     *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\r\n     */\n    dasherize: function (str) {\n      return str.replace(space_or_underbar, '-');\n    },\n\n    /**\r\n     * This function adds titleize support to every String object.\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @returns {String} Capitalizes words as you would for a book title.\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\r\n     *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\r\n     */\n    titleize: function (str) {\n      str = str.toLowerCase().replace(underbar, ' ');\n      var str_arr = str.split(' ');\n      var i = 0;\n      var j = str_arr.length;\n      var d, k, l;\n\n      for (; i < j; i++) {\n        d = str_arr[i].split('-');\n        k = 0;\n        l = d.length;\n\n        for (; k < l; k++) {\n          if (inflector.indexOf(non_titlecased_words, d[k].toLowerCase()) < 0) {\n            d[k] = inflector.capitalize(d[k]);\n          }\n        }\n\n        str_arr[i] = d.join('-');\n      }\n\n      str = str_arr.join(' ');\n      str = str.substring(0, 1).toUpperCase() + str.substring(1);\n      return str;\n    },\n\n    /**\r\n     * This function adds demodulize support to every String object.\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @returns {String} Removes module names leaving only class names.(Ruby style)\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\r\n     */\n    demodulize: function (str) {\n      var str_arr = str.split('::');\n      return str_arr[str_arr.length - 1];\n    },\n\n    /**\r\n     * This function adds tableize support to every String object.\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @returns {String} Return camel cased words into their underscored plural form.\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\r\n     */\n    tableize: function (str) {\n      str = inflector.underscore(str);\n      str = inflector.pluralize(str);\n      return str;\n    },\n\n    /**\r\n     * This function adds classification support to every String object.\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @returns {String} Underscored plural nouns become the camel cased singular form.\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\r\n     */\n    classify: function (str) {\n      str = inflector.camelize(str);\n      str = inflector.singularize(str);\n      return str;\n    },\n\n    /**\r\n     * This function adds foreign key support to every String object.\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\r\n                                   you can pass true to skip it.(optional)\r\n     * @returns {String} Underscored plural nouns become the camel cased singular form.\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\r\n     *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\r\n     */\n    foreign_key: function (str, drop_id_ubar) {\n      str = inflector.demodulize(str);\n      str = inflector.underscore(str) + (drop_id_ubar ? '' : '_') + 'id';\n      return str;\n    },\n\n    /**\r\n     * This function adds ordinalize support to every String object.\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @returns {String} Return all found numbers their sequence like '22nd'.\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\r\n     */\n    ordinalize: function (str) {\n      var str_arr = str.split(' ');\n      var i = 0;\n      var j = str_arr.length;\n\n      for (; i < j; i++) {\n        var k = parseInt(str_arr[i], 10);\n\n        if (!isNaN(k)) {\n          var ltd = str_arr[i].substring(str_arr[i].length - 2);\n          var ld = str_arr[i].substring(str_arr[i].length - 1);\n          var suf = 'th';\n\n          if (ltd != '11' && ltd != '12' && ltd != '13') {\n            if (ld === '1') {\n              suf = 'st';\n            } else if (ld === '2') {\n              suf = 'nd';\n            } else if (ld === '3') {\n              suf = 'rd';\n            }\n          }\n\n          str_arr[i] += suf;\n        }\n      }\n\n      return str_arr.join(' ');\n    },\n\n    /**\r\n     * This function performs multiple inflection methods on a string\r\n     * @public\r\n     * @function\r\n     * @param {String} str The subject string.\r\n     * @param {Array} arr An array of inflection methods.\r\n     * @returns {String}\r\n     * @example\r\n     *\r\n     *     var inflection = require( 'inflection' );\r\n     *\r\n     *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\r\n     */\n    transform: function (str, arr) {\n      var i = 0;\n      var j = arr.length;\n\n      for (; i < j; i++) {\n        var method = arr[i];\n\n        if (inflector.hasOwnProperty(method)) {\n          str = inflector[method](str);\n        }\n      }\n\n      return str;\n    }\n  };\n  /**\r\n   * @public\r\n   */\n\n  inflector.version = '1.12.0';\n  return inflector;\n});","map":{"version":3,"sources":["C:/Users/Felhasználó/IdeaProjects/node-rest-shop/client/node_modules/inflection/lib/inflection.js"],"names":["root","factory","define","amd","exports","module","inflection","uncountable_words","regex","plural","men","RegExp","people","children","tia","analyses","hives","curves","lrves","aves","foves","movies","aeiouyies","series","xes","mice","buses","oes","shoes","crises","octopi","aliases","summonses","oxen","matrices","vertices","feet","teeth","geese","quizzes","whereases","criteria","genera","ss","s","singular","man","person","child","ox","axis","octopus","alias","summons","bus","buffalo","tium","sis","ffe","hive","aeiouyy","x","matrix","vertex","mouse","foot","tooth","goose","quiz","whereas","criterion","genus","common","plural_rules","singular_rules","non_titlecased_words","id_suffix","underbar","space_or_underbar","uppercase","underbar_prefix","inflector","_apply_rules","str","rules","skip","override","ignore","indexOf","toLowerCase","i","j","length","match","undefined","replace","arr","item","from_index","compare_func","index","pluralize","singularize","inflect","count","parseInt","isNaN","camelize","low_first_letter","str_path","split","str_arr","init_x","k","l","first","charAt","toUpperCase","substring","join","underscore","all_upper_case","humanize","capitalize","dasherize","titleize","d","demodulize","tableize","classify","foreign_key","drop_id_ubar","ordinalize","ltd","ld","suf","transform","method","hasOwnProperty","version"],"mappings":"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","sourcesContent":["/*!\r\n * inflection\r\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\r\n * MIT Licensed\r\n *\r\n * @fileoverview\r\n * A port of inflection-js to node.js module.\r\n */\r\n\r\n( function ( root, factory ){\r\n  if( typeof define === 'function' && define.amd ){\r\n    define([], factory );\r\n  }else if( typeof exports === 'object' ){\r\n    module.exports = factory();\r\n  }else{\r\n    root.inflection = factory();\r\n  }\r\n}( this, function (){\r\n\r\n  /**\r\n   * @description This is a list of nouns that use the same form for both singular and plural.\r\n   *              This list should remain entirely in lower case to correctly match Strings.\r\n   * @private\r\n   */\r\n  var uncountable_words = [\r\n    // 'access',\r\n    'accommodation',\r\n    'adulthood',\r\n    'advertising',\r\n    'advice',\r\n    'aggression',\r\n    'aid',\r\n    'air',\r\n    'aircraft',\r\n    'alcohol',\r\n    'anger',\r\n    'applause',\r\n    'arithmetic',\r\n    // 'art',\r\n    'assistance',\r\n    'athletics',\r\n    // 'attention',\r\n\r\n    'bacon',\r\n    'baggage',\r\n    // 'ballet',\r\n    // 'beauty',\r\n    'beef',\r\n    // 'beer',\r\n    // 'behavior',\r\n    'biology',\r\n    // 'billiards',\r\n    'blood',\r\n    'botany',\r\n    // 'bowels',\r\n    'bread',\r\n    // 'business',\r\n    'butter',\r\n\r\n    'carbon',\r\n    'cardboard',\r\n    'cash',\r\n    'chalk',\r\n    'chaos',\r\n    'chess',\r\n    'crossroads',\r\n    'countryside',\r\n\r\n    // 'damage',\r\n    'dancing',\r\n    // 'danger',\r\n    'deer',\r\n    // 'delight',\r\n    // 'dessert',\r\n    'dignity',\r\n    'dirt',\r\n    // 'distribution',\r\n    'dust',\r\n\r\n    'economics',\r\n    'education',\r\n    'electricity',\r\n    // 'employment',\r\n    // 'energy',\r\n    'engineering',\r\n    'enjoyment',\r\n    // 'entertainment',\r\n    'envy',\r\n    'equipment',\r\n    'ethics',\r\n    'evidence',\r\n    'evolution',\r\n\r\n    // 'failure',\r\n    // 'faith',\r\n    'fame',\r\n    'fiction',\r\n    // 'fish',\r\n    'flour',\r\n    'flu',\r\n    'food',\r\n    // 'freedom',\r\n    // 'fruit',\r\n    'fuel',\r\n    'fun',\r\n    // 'funeral',\r\n    'furniture',\r\n\r\n    'gallows',\r\n    'garbage',\r\n    'garlic',\r\n    // 'gas',\r\n    'genetics',\r\n    // 'glass',\r\n    'gold',\r\n    'golf',\r\n    'gossip',\r\n    'grammar',\r\n    // 'grass',\r\n    'gratitude',\r\n    'grief',\r\n    // 'ground',\r\n    'guilt',\r\n    'gymnastics',\r\n\r\n    // 'hair',\r\n    'happiness',\r\n    'hardware',\r\n    'harm',\r\n    'hate',\r\n    'hatred',\r\n    'health',\r\n    'heat',\r\n    // 'height',\r\n    'help',\r\n    'homework',\r\n    'honesty',\r\n    'honey',\r\n    'hospitality',\r\n    'housework',\r\n    'humour',\r\n    'hunger',\r\n    'hydrogen',\r\n\r\n    'ice',\r\n    'importance',\r\n    'inflation',\r\n    'information',\r\n    // 'injustice',\r\n    'innocence',\r\n    // 'intelligence',\r\n    'iron',\r\n    'irony',\r\n\r\n    'jam',\r\n    // 'jealousy',\r\n    // 'jelly',\r\n    'jewelry',\r\n    // 'joy',\r\n    'judo',\r\n    // 'juice',\r\n    // 'justice',\r\n\r\n    'karate',\r\n    // 'kindness',\r\n    'knowledge',\r\n\r\n    // 'labour',\r\n    'lack',\r\n    // 'land',\r\n    'laughter',\r\n    'lava',\r\n    'leather',\r\n    'leisure',\r\n    'lightning',\r\n    'linguine',\r\n    'linguini',\r\n    'linguistics',\r\n    'literature',\r\n    'litter',\r\n    'livestock',\r\n    'logic',\r\n    'loneliness',\r\n    // 'love',\r\n    'luck',\r\n    'luggage',\r\n\r\n    'macaroni',\r\n    'machinery',\r\n    'magic',\r\n    // 'mail',\r\n    'management',\r\n    'mankind',\r\n    'marble',\r\n    'mathematics',\r\n    'mayonnaise',\r\n    'measles',\r\n    // 'meat',\r\n    // 'metal',\r\n    'methane',\r\n    'milk',\r\n    'minus',\r\n    'money',\r\n    // 'moose',\r\n    'mud',\r\n    'music',\r\n    'mumps',\r\n\r\n    'nature',\r\n    'news',\r\n    'nitrogen',\r\n    'nonsense',\r\n    'nurture',\r\n    'nutrition',\r\n\r\n    'obedience',\r\n    'obesity',\r\n    // 'oil',\r\n    'oxygen',\r\n\r\n    // 'paper',\r\n    // 'passion',\r\n    'pasta',\r\n    'patience',\r\n    // 'permission',\r\n    'physics',\r\n    'poetry',\r\n    'pollution',\r\n    'poverty',\r\n    // 'power',\r\n    'pride',\r\n    // 'production',\r\n    // 'progress',\r\n    // 'pronunciation',\r\n    'psychology',\r\n    'publicity',\r\n    'punctuation',\r\n\r\n    // 'quality',\r\n    // 'quantity',\r\n    'quartz',\r\n\r\n    'racism',\r\n    // 'rain',\r\n    // 'recreation',\r\n    'relaxation',\r\n    'reliability',\r\n    'research',\r\n    'respect',\r\n    'revenge',\r\n    'rice',\r\n    'rubbish',\r\n    'rum',\r\n\r\n    'safety',\r\n    // 'salad',\r\n    // 'salt',\r\n    // 'sand',\r\n    // 'satire',\r\n    'scenery',\r\n    'seafood',\r\n    'seaside',\r\n    'series',\r\n    'shame',\r\n    'sheep',\r\n    'shopping',\r\n    // 'silence',\r\n    'sleep',\r\n    // 'slang'\r\n    'smoke',\r\n    'smoking',\r\n    'snow',\r\n    'soap',\r\n    'software',\r\n    'soil',\r\n    // 'sorrow',\r\n    // 'soup',\r\n    'spaghetti',\r\n    // 'speed',\r\n    'species',\r\n    // 'spelling',\r\n    // 'sport',\r\n    'steam',\r\n    // 'strength',\r\n    'stuff',\r\n    'stupidity',\r\n    // 'success',\r\n    // 'sugar',\r\n    'sunshine',\r\n    'symmetry',\r\n\r\n    // 'tea',\r\n    'tennis',\r\n    'thirst',\r\n    'thunder',\r\n    'timber',\r\n    // 'time',\r\n    // 'toast',\r\n    // 'tolerance',\r\n    // 'trade',\r\n    'traffic',\r\n    'transportation',\r\n    // 'travel',\r\n    'trust',\r\n\r\n    // 'understanding',\r\n    'underwear',\r\n    'unemployment',\r\n    'unity',\r\n    // 'usage',\r\n\r\n    'validity',\r\n    'veal',\r\n    'vegetation',\r\n    'vegetarianism',\r\n    'vengeance',\r\n    'violence',\r\n    // 'vision',\r\n    'vitality',\r\n\r\n    'warmth',\r\n    // 'water',\r\n    'wealth',\r\n    'weather',\r\n    // 'weight',\r\n    'welfare',\r\n    'wheat',\r\n    // 'whiskey',\r\n    // 'width',\r\n    'wildlife',\r\n    // 'wine',\r\n    'wisdom',\r\n    // 'wood',\r\n    // 'wool',\r\n    // 'work',\r\n\r\n    // 'yeast',\r\n    'yoga',\r\n\r\n    'zinc',\r\n    'zoology'\r\n  ];\r\n\r\n  /**\r\n   * @description These rules translate from the singular form of a noun to its plural form.\r\n   * @private\r\n   */\r\n\r\n  var regex = {\r\n    plural : {\r\n      men       : new RegExp( '^(m|wom)en$'                    , 'gi' ),\r\n      people    : new RegExp( '(pe)ople$'                      , 'gi' ),\r\n      children  : new RegExp( '(child)ren$'                    , 'gi' ),\r\n      tia       : new RegExp( '([ti])a$'                       , 'gi' ),\r\n      analyses  : new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' ),\r\n      hives     : new RegExp( '(hi|ti)ves$'                    , 'gi' ),\r\n      curves    : new RegExp( '(curve)s$'                      , 'gi' ),\r\n      lrves     : new RegExp( '([lr])ves$'                     , 'gi' ),\r\n      aves      : new RegExp( '([a])ves$'                      , 'gi' ),\r\n      foves     : new RegExp( '([^fo])ves$'                    , 'gi' ),\r\n      movies    : new RegExp( '(m)ovies$'                      , 'gi' ),\r\n      aeiouyies : new RegExp( '([^aeiouy]|qu)ies$'             , 'gi' ),\r\n      series    : new RegExp( '(s)eries$'                      , 'gi' ),\r\n      xes       : new RegExp( '(x|ch|ss|sh)es$'                , 'gi' ),\r\n      mice      : new RegExp( '([m|l])ice$'                    , 'gi' ),\r\n      buses     : new RegExp( '(bus)es$'                       , 'gi' ),\r\n      oes       : new RegExp( '(o)es$'                         , 'gi' ),\r\n      shoes     : new RegExp( '(shoe)s$'                       , 'gi' ),\r\n      crises    : new RegExp( '(cris|ax|test)es$'              , 'gi' ),\r\n      octopi    : new RegExp( '(octop|vir)i$'                  , 'gi' ),\r\n      aliases   : new RegExp( '(alias|canvas|status|campus)es$', 'gi' ),\r\n      summonses : new RegExp( '^(summons)es$'                  , 'gi' ),\r\n      oxen      : new RegExp( '^(ox)en'                        , 'gi' ),\r\n      matrices  : new RegExp( '(matr)ices$'                    , 'gi' ),\r\n      vertices  : new RegExp( '(vert|ind)ices$'                , 'gi' ),\r\n      feet      : new RegExp( '^feet$'                         , 'gi' ),\r\n      teeth     : new RegExp( '^teeth$'                        , 'gi' ),\r\n      geese     : new RegExp( '^geese$'                        , 'gi' ),\r\n      quizzes   : new RegExp( '(quiz)zes$'                     , 'gi' ),\r\n      whereases : new RegExp( '^(whereas)es$'                  , 'gi' ),\r\n      criteria  : new RegExp( '^(criteri)a$'                   , 'gi' ),\r\n      genera    : new RegExp( '^genera$'                       , 'gi' ),\r\n      ss        : new RegExp( 'ss$'                            , 'gi' ),\r\n      s         : new RegExp( 's$'                             , 'gi' )\r\n    },\r\n\r\n    singular : {\r\n      man       : new RegExp( '^(m|wom)an$'                  , 'gi' ),\r\n      person    : new RegExp( '(pe)rson$'                    , 'gi' ),\r\n      child     : new RegExp( '(child)$'                     , 'gi' ),\r\n      ox        : new RegExp( '^(ox)$'                       , 'gi' ),\r\n      axis      : new RegExp( '(ax|test)is$'                 , 'gi' ),\r\n      octopus   : new RegExp( '(octop|vir)us$'               , 'gi' ),\r\n      alias     : new RegExp( '(alias|status|canvas|campus)$', 'gi' ),\r\n      summons   : new RegExp( '^(summons)$'                  , 'gi' ),\r\n      bus       : new RegExp( '(bu)s$'                       , 'gi' ),\r\n      buffalo   : new RegExp( '(buffal|tomat|potat)o$'       , 'gi' ),\r\n      tium      : new RegExp( '([ti])um$'                    , 'gi' ),\r\n      sis       : new RegExp( 'sis$'                         , 'gi' ),\r\n      ffe       : new RegExp( '(?:([^f])fe|([lr])f)$'        , 'gi' ),\r\n      hive      : new RegExp( '(hi|ti)ve$'                   , 'gi' ),\r\n      aeiouyy   : new RegExp( '([^aeiouy]|qu)y$'             , 'gi' ),\r\n      x         : new RegExp( '(x|ch|ss|sh)$'                , 'gi' ),\r\n      matrix    : new RegExp( '(matr)ix$'                    , 'gi' ),\r\n      vertex    : new RegExp( '(vert|ind)ex$'                , 'gi' ),\r\n      mouse     : new RegExp( '([m|l])ouse$'                 , 'gi' ),\r\n      foot      : new RegExp( '^foot$'                       , 'gi' ),\r\n      tooth     : new RegExp( '^tooth$'                      , 'gi' ),\r\n      goose     : new RegExp( '^goose$'                      , 'gi' ),\r\n      quiz      : new RegExp( '(quiz)$'                      , 'gi' ),\r\n      whereas   : new RegExp( '^(whereas)$'                  , 'gi' ),\r\n      criterion : new RegExp( '^(criteri)on$'                , 'gi' ),\r\n      genus     : new RegExp( '^genus$'                      , 'gi' ),\r\n      s         : new RegExp( 's$'                           , 'gi' ),\r\n      common    : new RegExp( '$'                            , 'gi' )\r\n    }\r\n  };\r\n\r\n  var plural_rules = [\r\n\r\n    // do not replace if its already a plural word\r\n    [ regex.plural.men       ],\r\n    [ regex.plural.people    ],\r\n    [ regex.plural.children  ],\r\n    [ regex.plural.tia       ],\r\n    [ regex.plural.analyses  ],\r\n    [ regex.plural.hives     ],\r\n    [ regex.plural.curves    ],\r\n    [ regex.plural.lrves     ],\r\n    [ regex.plural.foves     ],\r\n    [ regex.plural.aeiouyies ],\r\n    [ regex.plural.series    ],\r\n    [ regex.plural.movies    ],\r\n    [ regex.plural.xes       ],\r\n    [ regex.plural.mice      ],\r\n    [ regex.plural.buses     ],\r\n    [ regex.plural.oes       ],\r\n    [ regex.plural.shoes     ],\r\n    [ regex.plural.crises    ],\r\n    [ regex.plural.octopi    ],\r\n    [ regex.plural.aliases   ],\r\n    [ regex.plural.summonses ],\r\n    [ regex.plural.oxen      ],\r\n    [ regex.plural.matrices  ],\r\n    [ regex.plural.feet      ],\r\n    [ regex.plural.teeth     ],\r\n    [ regex.plural.geese     ],\r\n    [ regex.plural.quizzes   ],\r\n    [ regex.plural.whereases ],\r\n    [ regex.plural.criteria  ],\r\n    [ regex.plural.genera    ],\r\n\r\n    // original rule\r\n    [ regex.singular.man      , '$1en' ],\r\n    [ regex.singular.person   , '$1ople' ],\r\n    [ regex.singular.child    , '$1ren' ],\r\n    [ regex.singular.ox       , '$1en' ],\r\n    [ regex.singular.axis     , '$1es' ],\r\n    [ regex.singular.octopus  , '$1i' ],\r\n    [ regex.singular.alias    , '$1es' ],\r\n    [ regex.singular.summons  , '$1es' ],\r\n    [ regex.singular.bus      , '$1ses' ],\r\n    [ regex.singular.buffalo  , '$1oes' ],\r\n    [ regex.singular.tium     , '$1a' ],\r\n    [ regex.singular.sis      , 'ses' ],\r\n    [ regex.singular.ffe      , '$1$2ves' ],\r\n    [ regex.singular.hive     , '$1ves' ],\r\n    [ regex.singular.aeiouyy  , '$1ies' ],\r\n    [ regex.singular.matrix   , '$1ices' ],\r\n    [ regex.singular.vertex   , '$1ices' ],\r\n    [ regex.singular.x        , '$1es' ],\r\n    [ regex.singular.mouse    , '$1ice' ],\r\n    [ regex.singular.foot     , 'feet' ],\r\n    [ regex.singular.tooth    , 'teeth' ],\r\n    [ regex.singular.goose    , 'geese' ],\r\n    [ regex.singular.quiz     , '$1zes' ],\r\n    [ regex.singular.whereas  , '$1es' ],\r\n    [ regex.singular.criterion, '$1a' ],\r\n    [ regex.singular.genus    , 'genera' ],\r\n\r\n    [ regex.singular.s     , 's' ],\r\n    [ regex.singular.common, 's' ]\r\n  ];\r\n\r\n  /**\r\n   * @description These rules translate from the plural form of a noun to its singular form.\r\n   * @private\r\n   */\r\n  var singular_rules = [\r\n\r\n    // do not replace if its already a singular word\r\n    [ regex.singular.man     ],\r\n    [ regex.singular.person  ],\r\n    [ regex.singular.child   ],\r\n    [ regex.singular.ox      ],\r\n    [ regex.singular.axis    ],\r\n    [ regex.singular.octopus ],\r\n    [ regex.singular.alias   ],\r\n    [ regex.singular.summons ],\r\n    [ regex.singular.bus     ],\r\n    [ regex.singular.buffalo ],\r\n    [ regex.singular.tium    ],\r\n    [ regex.singular.sis     ],\r\n    [ regex.singular.ffe     ],\r\n    [ regex.singular.hive    ],\r\n    [ regex.singular.aeiouyy ],\r\n    [ regex.singular.x       ],\r\n    [ regex.singular.matrix  ],\r\n    [ regex.singular.mouse   ],\r\n    [ regex.singular.foot    ],\r\n    [ regex.singular.tooth   ],\r\n    [ regex.singular.goose   ],\r\n    [ regex.singular.quiz    ],\r\n    [ regex.singular.whereas ],\r\n    [ regex.singular.criterion ],\r\n    [ regex.singular.genus ],\r\n\r\n    // original rule\r\n    [ regex.plural.men      , '$1an' ],\r\n    [ regex.plural.people   , '$1rson' ],\r\n    [ regex.plural.children , '$1' ],\r\n    [ regex.plural.genera   , 'genus'],\r\n    [ regex.plural.criteria , '$1on'],\r\n    [ regex.plural.tia      , '$1um' ],\r\n    [ regex.plural.analyses , '$1$2sis' ],\r\n    [ regex.plural.hives    , '$1ve' ],\r\n    [ regex.plural.curves   , '$1' ],\r\n    [ regex.plural.lrves    , '$1f' ],\r\n    [ regex.plural.aves     , '$1ve' ],\r\n    [ regex.plural.foves    , '$1fe' ],\r\n    [ regex.plural.movies   , '$1ovie' ],\r\n    [ regex.plural.aeiouyies, '$1y' ],\r\n    [ regex.plural.series   , '$1eries' ],\r\n    [ regex.plural.xes      , '$1' ],\r\n    [ regex.plural.mice     , '$1ouse' ],\r\n    [ regex.plural.buses    , '$1' ],\r\n    [ regex.plural.oes      , '$1' ],\r\n    [ regex.plural.shoes    , '$1' ],\r\n    [ regex.plural.crises   , '$1is' ],\r\n    [ regex.plural.octopi   , '$1us' ],\r\n    [ regex.plural.aliases  , '$1' ],\r\n    [ regex.plural.summonses, '$1' ],\r\n    [ regex.plural.oxen     , '$1' ],\r\n    [ regex.plural.matrices , '$1ix' ],\r\n    [ regex.plural.vertices , '$1ex' ],\r\n    [ regex.plural.feet     , 'foot' ],\r\n    [ regex.plural.teeth    , 'tooth' ],\r\n    [ regex.plural.geese    , 'goose' ],\r\n    [ regex.plural.quizzes  , '$1' ],\r\n    [ regex.plural.whereases, '$1' ],\r\n\r\n    [ regex.plural.ss, 'ss' ],\r\n    [ regex.plural.s , '' ]\r\n  ];\r\n\r\n  /**\r\n   * @description This is a list of words that should not be capitalized for title case.\r\n   * @private\r\n   */\r\n  var non_titlecased_words = [\r\n    'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at','by',\r\n    'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'\r\n  ];\r\n\r\n  /**\r\n   * @description These are regular expressions used for converting between String formats.\r\n   * @private\r\n   */\r\n  var id_suffix         = new RegExp( '(_ids|_id)$', 'g' );\r\n  var underbar          = new RegExp( '_', 'g' );\r\n  var space_or_underbar = new RegExp( '[\\ _]', 'g' );\r\n  var uppercase         = new RegExp( '([A-Z])', 'g' );\r\n  var underbar_prefix   = new RegExp( '^_' );\r\n\r\n  var inflector = {\r\n\r\n  /**\r\n   * A helper method that applies rules based replacement to a String.\r\n   * @private\r\n   * @function\r\n   * @param {String} str String to modify and return based on the passed rules.\r\n   * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\r\n   * @param {Array: [String]} skip Strings to skip if they match\r\n   * @param {String} override String to return as though this method succeeded (used to conform to APIs)\r\n   * @returns {String} Return passed String modified by passed rules.\r\n   * @example\r\n   *\r\n   *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\r\n   */\r\n    _apply_rules : function ( str, rules, skip, override ){\r\n      if( override ){\r\n        str = override;\r\n      }else{\r\n        var ignore = ( inflector.indexOf( skip, str.toLowerCase()) > -1 );\r\n\r\n        if( !ignore ){\r\n          var i = 0;\r\n          var j = rules.length;\r\n\r\n          for( ; i < j; i++ ){\r\n            if( str.match( rules[ i ][ 0 ])){\r\n              if( rules[ i ][ 1 ] !== undefined ){\r\n                str = str.replace( rules[ i ][ 0 ], rules[ i ][ 1 ]);\r\n              }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return str;\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This lets us detect if an Array contains a given element.\r\n   * @public\r\n   * @function\r\n   * @param {Array} arr The subject array.\r\n   * @param {Object} item Object to locate in the Array.\r\n   * @param {Number} from_index Starts checking from this position in the Array.(optional)\r\n   * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\r\n   * @returns {Number} Return index position in the Array of the passed item.\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\r\n   *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\r\n   */\r\n    indexOf : function ( arr, item, from_index, compare_func ){\r\n      if( !from_index ){\r\n        from_index = -1;\r\n      }\r\n\r\n      var index = -1;\r\n      var i     = from_index;\r\n      var j     = arr.length;\r\n\r\n      for( ; i < j; i++ ){\r\n        if( arr[ i ]  === item || compare_func && compare_func( arr[ i ], item )){\r\n          index = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      return index;\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This function adds pluralization support to every String object.\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @param {String} plural Overrides normal output with said String.(optional)\r\n   * @returns {String} Singular English language nouns are returned in plural form.\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.pluralize( 'person' ); // === 'people'\r\n   *     inflection.pluralize( 'octopus' ); // === 'octopi'\r\n   *     inflection.pluralize( 'Hat' ); // === 'Hats'\r\n   *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\r\n   */\r\n    pluralize : function ( str, plural ){\r\n      return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This function adds singularization support to every String object.\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @param {String} singular Overrides normal output with said String.(optional)\r\n   * @returns {String} Plural English language nouns are returned in singular form.\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.singularize( 'people' ); // === 'person'\r\n   *     inflection.singularize( 'octopi' ); // === 'octopus'\r\n   *     inflection.singularize( 'Hats' ); // === 'Hat'\r\n   *     inflection.singularize( 'guys', 'person' ); // === 'person'\r\n   */\r\n    singularize : function ( str, singular ){\r\n      return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\r\n    },\r\n\r\n\r\n  /**\r\n   * This function will pluralize or singularlize a String appropriately based on an integer value\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @param {Number} count The number to base pluralization off of.\r\n   * @param {String} singular Overrides normal output with said String.(optional)\r\n   * @param {String} plural Overrides normal output with said String.(optional)\r\n   * @returns {String} English language nouns are returned in the plural or singular form based on the count.\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.inflect( 'people' 1 ); // === 'person'\r\n   *     inflection.inflect( 'octopi' 1 ); // === 'octopus'\r\n   *     inflection.inflect( 'Hats' 1 ); // === 'Hat'\r\n   *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'\r\n   *     inflection.inflect( 'person', 2 ); // === 'people'\r\n   *     inflection.inflect( 'octopus', 2 ); // === 'octopi'\r\n   *     inflection.inflect( 'Hat', 2 ); // === 'Hats'\r\n   *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'\r\n   */\r\n    inflect : function ( str, count, singular, plural ){\r\n      count = parseInt( count, 10 );\r\n\r\n      if( isNaN( count )) return str;\r\n\r\n      if( count === 0 || count > 1 ){\r\n        return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\r\n      }else{\r\n        return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\r\n      }\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This function adds camelization support to every String object.\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\r\n   *                                 Passing true will lowercase it.\r\n   * @returns {String} Lower case underscored words will be returned in camel case.\r\n   *                  additionally '/' is translated to '::'\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\r\n   *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\r\n   */\r\n    camelize : function ( str, low_first_letter ){\r\n      var str_path = str.split( '/' );\r\n      var i        = 0;\r\n      var j        = str_path.length;\r\n      var str_arr, init_x, k, l, first;\r\n\r\n      for( ; i < j; i++ ){\r\n        str_arr = str_path[ i ].split( '_' );\r\n        k       = 0;\r\n        l       = str_arr.length;\r\n\r\n        for( ; k < l; k++ ){\r\n          if( k !== 0 ){\r\n            str_arr[ k ] = str_arr[ k ].toLowerCase();\r\n          }\r\n\r\n          first = str_arr[ k ].charAt( 0 );\r\n          first = low_first_letter && i === 0 && k === 0\r\n            ? first.toLowerCase() : first.toUpperCase();\r\n          str_arr[ k ] = first + str_arr[ k ].substring( 1 );\r\n        }\r\n\r\n        str_path[ i ] = str_arr.join( '' );\r\n      }\r\n\r\n      return str_path.join( '::' );\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This function adds underscore support to every String object.\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\r\n   *                  Passing true will return as entered.\r\n   * @returns {String} Camel cased words are returned as lower cased and underscored.\r\n   *                  additionally '::' is translated to '/'.\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\r\n   *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\r\n   *     inflection.underscore( 'MP', true ); // === 'MP'\r\n   */\r\n    underscore : function ( str, all_upper_case ){\r\n      if( all_upper_case && str === str.toUpperCase()) return str;\r\n\r\n      var str_path = str.split( '::' );\r\n      var i        = 0;\r\n      var j        = str_path.length;\r\n\r\n      for( ; i < j; i++ ){\r\n        str_path[ i ] = str_path[ i ].replace( uppercase, '_$1' );\r\n        str_path[ i ] = str_path[ i ].replace( underbar_prefix, '' );\r\n      }\r\n\r\n      return str_path.join( '/' ).toLowerCase();\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This function adds humanize support to every String object.\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\r\n   *                                 Passing true will lowercase it.\r\n   * @returns {String} Lower case underscored words will be returned in humanized form.\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.humanize( 'message_properties' ); // === 'Message properties'\r\n   *     inflection.humanize( 'message_properties', true ); // === 'message properties'\r\n   */\r\n    humanize : function ( str, low_first_letter ){\r\n      str = str.toLowerCase();\r\n      str = str.replace( id_suffix, '' );\r\n      str = str.replace( underbar, ' ' );\r\n\r\n      if( !low_first_letter ){\r\n        str = inflector.capitalize( str );\r\n      }\r\n\r\n      return str;\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This function adds capitalization support to every String object.\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @returns {String} All characters will be lower case and the first will be upper.\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\r\n   *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\r\n   */\r\n    capitalize : function ( str ){\r\n      str = str.toLowerCase();\r\n\r\n      return str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This function replaces underscores with dashes in the string.\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @returns {String} Replaces all spaces or underscores with dashes.\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\r\n   *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\r\n   */\r\n    dasherize : function ( str ){\r\n      return str.replace( space_or_underbar, '-' );\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This function adds titleize support to every String object.\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @returns {String} Capitalizes words as you would for a book title.\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\r\n   *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\r\n   */\r\n    titleize : function ( str ){\r\n      str         = str.toLowerCase().replace( underbar, ' ' );\r\n      var str_arr = str.split( ' ' );\r\n      var i       = 0;\r\n      var j       = str_arr.length;\r\n      var d, k, l;\r\n\r\n      for( ; i < j; i++ ){\r\n        d = str_arr[ i ].split( '-' );\r\n        k = 0;\r\n        l = d.length;\r\n\r\n        for( ; k < l; k++){\r\n          if( inflector.indexOf( non_titlecased_words, d[ k ].toLowerCase()) < 0 ){\r\n            d[ k ] = inflector.capitalize( d[ k ]);\r\n          }\r\n        }\r\n\r\n        str_arr[ i ] = d.join( '-' );\r\n      }\r\n\r\n      str = str_arr.join( ' ' );\r\n      str = str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\r\n\r\n      return str;\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This function adds demodulize support to every String object.\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @returns {String} Removes module names leaving only class names.(Ruby style)\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\r\n   */\r\n    demodulize : function ( str ){\r\n      var str_arr = str.split( '::' );\r\n\r\n      return str_arr[ str_arr.length - 1 ];\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This function adds tableize support to every String object.\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @returns {String} Return camel cased words into their underscored plural form.\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\r\n   */\r\n    tableize : function ( str ){\r\n      str = inflector.underscore( str );\r\n      str = inflector.pluralize( str );\r\n\r\n      return str;\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This function adds classification support to every String object.\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\r\n   */\r\n    classify : function ( str ){\r\n      str = inflector.camelize( str );\r\n      str = inflector.singularize( str );\r\n\r\n      return str;\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This function adds foreign key support to every String object.\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\r\n                                 you can pass true to skip it.(optional)\r\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\r\n   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\r\n   */\r\n    foreign_key : function ( str, drop_id_ubar ){\r\n      str = inflector.demodulize( str );\r\n      str = inflector.underscore( str ) + (( drop_id_ubar ) ? ( '' ) : ( '_' )) + 'id';\r\n\r\n      return str;\r\n    },\r\n\r\n\r\n\r\n  /**\r\n   * This function adds ordinalize support to every String object.\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @returns {String} Return all found numbers their sequence like '22nd'.\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\r\n   */\r\n    ordinalize : function ( str ){\r\n      var str_arr = str.split( ' ' );\r\n      var i       = 0;\r\n      var j       = str_arr.length;\r\n\r\n      for( ; i < j; i++ ){\r\n        var k = parseInt( str_arr[ i ], 10 );\r\n\r\n        if( !isNaN( k )){\r\n          var ltd = str_arr[ i ].substring( str_arr[ i ].length - 2 );\r\n          var ld  = str_arr[ i ].substring( str_arr[ i ].length - 1 );\r\n          var suf = 'th';\r\n\r\n          if( ltd != '11' && ltd != '12' && ltd != '13' ){\r\n            if( ld === '1' ){\r\n              suf = 'st';\r\n            }else if( ld === '2' ){\r\n              suf = 'nd';\r\n            }else if( ld === '3' ){\r\n              suf = 'rd';\r\n            }\r\n          }\r\n\r\n          str_arr[ i ] += suf;\r\n        }\r\n      }\r\n\r\n      return str_arr.join( ' ' );\r\n    },\r\n\r\n  /**\r\n   * This function performs multiple inflection methods on a string\r\n   * @public\r\n   * @function\r\n   * @param {String} str The subject string.\r\n   * @param {Array} arr An array of inflection methods.\r\n   * @returns {String}\r\n   * @example\r\n   *\r\n   *     var inflection = require( 'inflection' );\r\n   *\r\n   *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\r\n   */\r\n    transform : function ( str, arr ){\r\n      var i = 0;\r\n      var j = arr.length;\r\n\r\n      for( ;i < j; i++ ){\r\n        var method = arr[ i ];\r\n\r\n        if( inflector.hasOwnProperty( method )){\r\n          str = inflector[ method ]( str );\r\n        }\r\n      }\r\n\r\n      return str;\r\n    }\r\n  };\r\n\r\n/**\r\n * @public\r\n */\r\n  inflector.version = '1.12.0';\r\n\r\n  return inflector;\r\n}));\r\n"]},"metadata":{},"sourceType":"script"}