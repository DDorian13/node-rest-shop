{"ast":null,"code":"import { useContext } from 'react';\nimport ListContext from './ListContext';\n/**\r\n * Hook to read the list controller props from the ListContext.\r\n *\r\n * Must be used within a <ListContext.Provider> (e.g. as a descendent of <List>\r\n * or <ListBase>).\r\n *\r\n * @typedef {Object} ListControllerProps\r\n * @prop {Object}   data an id-based dictionary of the list data, e.g. { 123: { id: 123, title: 'hello world' }, 456: { ... } }\r\n * @prop {Array}    ids an array listing the ids of the records in the list, e.g [123, 456, ...]\r\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\r\n * @prop {boolean}  loaded boolean that is false until the data is available\r\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\r\n * @prop {integer}  page the current page. Starts at 1\r\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\r\n * @prop {integer}  perPage the number of results per page. Defaults to 25\r\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\r\n * @prop {Object}   currentSort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\r\n * @prop {Function} setSort a callback to change the sort, e.g. setSort('name', 'ASC')\r\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\r\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\r\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\r\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\r\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hidefilter('title')\r\n * @prop {Array}    selectedIds an array listing the ids of the selcted rows, e.g. [123, 456]\r\n * @prop {Function} onSelect callback to change the list of selected rows, e.g onSelect([456, 789])\r\n * @prop {Function} onToggleItem callback to toggle the selection of a given record based on its id, e.g. onToggleItem(456)\r\n * @prop {Function} onUnselectItems callback to clear the selection, e.g. onUnselectItems();\r\n * @prop {string}   basePath deduced from the location, useful for action buttons\r\n * @prop {string}   defaultTitle the translated title based on the resource, e.g. 'Posts'\r\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\r\n *\r\n * @returns {ListControllerProps} list controller props\r\n *\r\n * @see useListController for how it is filled\r\n *\r\n * @example // custom list view\r\n *\r\n * import { useListContext } from 'react-admin';\r\n *\r\n * const MyList = () => {\r\n *     const { data, id, loaded } = useListContext();\r\n *     if (!loaded) {\r\n *         return <>Loading...</>;\r\n *     }\r\n *     const records = ids.map(id => data[id]);\r\n *     return (\r\n *         <ul>\r\n *             {records.map(record => (\r\n *                 <li key={record.id}>{record.name}</li>\r\n *             ))}\r\n *         </ul>\r\n *     );\r\n * }\r\n *\r\n * @example // custom pagination\r\n *\r\n * import { useListContext } from 'react-admin';\r\n * import { Button, Toolbar } from '@material-ui/core';\r\n * import ChevronLeft from '@material-ui/icons/ChevronLeft';\r\n * import ChevronRight from '@material-ui/icons/ChevronRight';\r\n *\r\n * const PrevNextPagination = () => {\r\n *     const { page, perPage, total, setPage } = useListContext();\r\n *     const nbPages = Math.ceil(total / perPage) || 1;\r\n *     return (\r\n *         nbPages > 1 &&\r\n *             <Toolbar>\r\n *                 {page > 1 &&\r\n *                     <Button color=\"primary\" key=\"prev\" onClick={() => setPage(page - 1)}>\r\n *                         <ChevronLeft />\r\n *                         Prev\r\n *                     </Button>\r\n *                 }\r\n *                 {page !== nbPages &&\r\n *                     <Button color=\"primary\" key=\"next\" onClick={() => setPage(page + 1)}>\r\n *                         Next\r\n *                         <ChevronRight />\r\n *                     </Button>\r\n *                 }\r\n *             </Toolbar>\r\n *     );\r\n * }\r\n */\n\nvar useListContext = function (props) {\n  var context = useContext(ListContext);\n\n  if (!context.resource) {\n    /**\r\n     * The element isn't inside a <ListContext.Provider>\r\n     *\r\n     * This may only happen when using Datagrid / SimpleList / SingleFieldList components\r\n     * outside of a List / ReferenceManyField / ReferenceArrayField -\r\n     * which isn't documented but tolerated.\r\n     * To avoid breakage in that case, fallback to props\r\n     *\r\n     * @deprecated - to be removed in 4.0\r\n     */\n    if (process.env.NODE_ENV !== 'production') {\n      console.log(\"List components must be used inside a <ListContext.Provider>. Relying on props rather than context to get List data and callbacks is deprecated and won't be supported in the next major version of react-admin.\");\n    }\n\n    return props;\n  } // @ts-ignore\n\n\n  return context;\n};\n\nexport default useListContext;","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/ra-core/esm/controller/useListContext.js"],"names":["useContext","ListContext","useListContext","props","context","resource","process","env","NODE_ENV","console","log"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA,IAAIC,cAAc,GAAG,UAAUC,KAAV,EAAiB;AAClC,MAAIC,OAAO,GAAGJ,UAAU,CAACC,WAAD,CAAxB;;AACA,MAAI,CAACG,OAAO,CAACC,QAAb,EAAuB;AACnB;;;;;;;;;;AAUA,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCC,MAAAA,OAAO,CAACC,GAAR,CAAY,kNAAZ;AACH;;AACD,WAAOP,KAAP;AACH,GAjBiC,CAkBlC;;;AACA,SAAOC,OAAP;AACH,CApBD;;AAqBA,eAAeF,cAAf","sourcesContent":["import { useContext } from 'react';\r\nimport ListContext from './ListContext';\r\n/**\r\n * Hook to read the list controller props from the ListContext.\r\n *\r\n * Must be used within a <ListContext.Provider> (e.g. as a descendent of <List>\r\n * or <ListBase>).\r\n *\r\n * @typedef {Object} ListControllerProps\r\n * @prop {Object}   data an id-based dictionary of the list data, e.g. { 123: { id: 123, title: 'hello world' }, 456: { ... } }\r\n * @prop {Array}    ids an array listing the ids of the records in the list, e.g [123, 456, ...]\r\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\r\n * @prop {boolean}  loaded boolean that is false until the data is available\r\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\r\n * @prop {integer}  page the current page. Starts at 1\r\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\r\n * @prop {integer}  perPage the number of results per page. Defaults to 25\r\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\r\n * @prop {Object}   currentSort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\r\n * @prop {Function} setSort a callback to change the sort, e.g. setSort('name', 'ASC')\r\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\r\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\r\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\r\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\r\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hidefilter('title')\r\n * @prop {Array}    selectedIds an array listing the ids of the selcted rows, e.g. [123, 456]\r\n * @prop {Function} onSelect callback to change the list of selected rows, e.g onSelect([456, 789])\r\n * @prop {Function} onToggleItem callback to toggle the selection of a given record based on its id, e.g. onToggleItem(456)\r\n * @prop {Function} onUnselectItems callback to clear the selection, e.g. onUnselectItems();\r\n * @prop {string}   basePath deduced from the location, useful for action buttons\r\n * @prop {string}   defaultTitle the translated title based on the resource, e.g. 'Posts'\r\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\r\n *\r\n * @returns {ListControllerProps} list controller props\r\n *\r\n * @see useListController for how it is filled\r\n *\r\n * @example // custom list view\r\n *\r\n * import { useListContext } from 'react-admin';\r\n *\r\n * const MyList = () => {\r\n *     const { data, id, loaded } = useListContext();\r\n *     if (!loaded) {\r\n *         return <>Loading...</>;\r\n *     }\r\n *     const records = ids.map(id => data[id]);\r\n *     return (\r\n *         <ul>\r\n *             {records.map(record => (\r\n *                 <li key={record.id}>{record.name}</li>\r\n *             ))}\r\n *         </ul>\r\n *     );\r\n * }\r\n *\r\n * @example // custom pagination\r\n *\r\n * import { useListContext } from 'react-admin';\r\n * import { Button, Toolbar } from '@material-ui/core';\r\n * import ChevronLeft from '@material-ui/icons/ChevronLeft';\r\n * import ChevronRight from '@material-ui/icons/ChevronRight';\r\n *\r\n * const PrevNextPagination = () => {\r\n *     const { page, perPage, total, setPage } = useListContext();\r\n *     const nbPages = Math.ceil(total / perPage) || 1;\r\n *     return (\r\n *         nbPages > 1 &&\r\n *             <Toolbar>\r\n *                 {page > 1 &&\r\n *                     <Button color=\"primary\" key=\"prev\" onClick={() => setPage(page - 1)}>\r\n *                         <ChevronLeft />\r\n *                         Prev\r\n *                     </Button>\r\n *                 }\r\n *                 {page !== nbPages &&\r\n *                     <Button color=\"primary\" key=\"next\" onClick={() => setPage(page + 1)}>\r\n *                         Next\r\n *                         <ChevronRight />\r\n *                     </Button>\r\n *                 }\r\n *             </Toolbar>\r\n *     );\r\n * }\r\n */\r\nvar useListContext = function (props) {\r\n    var context = useContext(ListContext);\r\n    if (!context.resource) {\r\n        /**\r\n         * The element isn't inside a <ListContext.Provider>\r\n         *\r\n         * This may only happen when using Datagrid / SimpleList / SingleFieldList components\r\n         * outside of a List / ReferenceManyField / ReferenceArrayField -\r\n         * which isn't documented but tolerated.\r\n         * To avoid breakage in that case, fallback to props\r\n         *\r\n         * @deprecated - to be removed in 4.0\r\n         */\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            console.log(\"List components must be used inside a <ListContext.Provider>. Relying on props rather than context to get List data and callbacks is deprecated and won't be supported in the next major version of react-admin.\");\r\n        }\r\n        return props;\r\n    }\r\n    // @ts-ignore\r\n    return context;\r\n};\r\nexport default useListContext;\r\n"]},"metadata":{},"sourceType":"module"}