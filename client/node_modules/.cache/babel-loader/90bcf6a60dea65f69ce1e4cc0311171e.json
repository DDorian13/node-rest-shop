{"ast":null,"code":"import { createContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\n/**\r\n * Context to store the filter part of the useListController() result.\r\n *\r\n * Use the useListFilterContext() hook to read the context. That's what many\r\n * List components do in react-admn (e.g. <Filter>, <FilterListItem>).\r\n *\r\n * @typedef {Object} ListFilterContextValue\r\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\r\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\r\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\r\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\r\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hidefilter('title')\r\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\r\n *\r\n * @typedef Props\r\n * @prop {ListFilterContextValue} value\r\n *\r\n * @param {Props}\r\n *\r\n * @see useListController\r\n * @see useListFilterContext\r\n *\r\n * @example\r\n *\r\n * import { useListController, usePickFilterContext, ListFilterContext } from 'ra-core';\r\n *\r\n * const List = props => {\r\n *     const controllerProps = useListController(props);\r\n *     return (\r\n *         <ListFilterContext.Provider value={usePickFilterContext(controllerProps)}>\r\n *             ...\r\n *         </ListFilterContext.Provider>\r\n *     );\r\n * };\r\n */\n\nvar ListFilterContext = createContext({\n  displayedFilters: null,\n  filterValues: null,\n  hideFilter: null,\n  setFilters: null,\n  showFilter: null,\n  resource: null\n});\nexport var usePickFilterContext = function (context) {\n  return useMemo(function () {\n    return pick(context, ['displayedFilters', 'filterValues', 'hideFilter', 'setFilters', 'showFilter', 'resource']);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [context.displayedFilters, context.filterValues, context.hideFilter, context.setFilters, context.showFilter]);\n};\nListFilterContext.displayName = 'ListFilterContext';\nexport default ListFilterContext;","map":{"version":3,"sources":["C:/Users/Felhasználó/IdeaProjects/node-rest-shop/client/node_modules/ra-core/esm/controller/ListFilterContext.js"],"names":["createContext","useMemo","pick","ListFilterContext","displayedFilters","filterValues","hideFilter","setFilters","showFilter","resource","usePickFilterContext","context","displayName"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,OAAxB,QAAuC,OAAvC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,IAAIC,iBAAiB,GAAGH,aAAa,CAAC;AAClCI,EAAAA,gBAAgB,EAAE,IADgB;AAElCC,EAAAA,YAAY,EAAE,IAFoB;AAGlCC,EAAAA,UAAU,EAAE,IAHsB;AAIlCC,EAAAA,UAAU,EAAE,IAJsB;AAKlCC,EAAAA,UAAU,EAAE,IALsB;AAMlCC,EAAAA,QAAQ,EAAE;AANwB,CAAD,CAArC;AAQA,OAAO,IAAIC,oBAAoB,GAAG,UAAUC,OAAV,EAAmB;AACjD,SAAOV,OAAO,CAAC,YAAY;AACvB,WAAOC,IAAI,CAACS,OAAD,EAAU,CACjB,kBADiB,EAEjB,cAFiB,EAGjB,YAHiB,EAIjB,YAJiB,EAKjB,YALiB,EAMjB,UANiB,CAAV,CAAX;AAQH,GATa,EAUd;AACA,GACIA,OAAO,CAACP,gBADZ,EAEIO,OAAO,CAACN,YAFZ,EAGIM,OAAO,CAACL,UAHZ,EAIIK,OAAO,CAACJ,UAJZ,EAKII,OAAO,CAACH,UALZ,CAXc,CAAd;AAkBH,CAnBM;AAoBPL,iBAAiB,CAACS,WAAlB,GAAgC,mBAAhC;AACA,eAAeT,iBAAf","sourcesContent":["import { createContext, useMemo } from 'react';\r\nimport pick from 'lodash/pick';\r\n/**\r\n * Context to store the filter part of the useListController() result.\r\n *\r\n * Use the useListFilterContext() hook to read the context. That's what many\r\n * List components do in react-admn (e.g. <Filter>, <FilterListItem>).\r\n *\r\n * @typedef {Object} ListFilterContextValue\r\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\r\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\r\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\r\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\r\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hidefilter('title')\r\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\r\n *\r\n * @typedef Props\r\n * @prop {ListFilterContextValue} value\r\n *\r\n * @param {Props}\r\n *\r\n * @see useListController\r\n * @see useListFilterContext\r\n *\r\n * @example\r\n *\r\n * import { useListController, usePickFilterContext, ListFilterContext } from 'ra-core';\r\n *\r\n * const List = props => {\r\n *     const controllerProps = useListController(props);\r\n *     return (\r\n *         <ListFilterContext.Provider value={usePickFilterContext(controllerProps)}>\r\n *             ...\r\n *         </ListFilterContext.Provider>\r\n *     );\r\n * };\r\n */\r\nvar ListFilterContext = createContext({\r\n    displayedFilters: null,\r\n    filterValues: null,\r\n    hideFilter: null,\r\n    setFilters: null,\r\n    showFilter: null,\r\n    resource: null,\r\n});\r\nexport var usePickFilterContext = function (context) {\r\n    return useMemo(function () {\r\n        return pick(context, [\r\n            'displayedFilters',\r\n            'filterValues',\r\n            'hideFilter',\r\n            'setFilters',\r\n            'showFilter',\r\n            'resource',\r\n        ]);\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [\r\n        context.displayedFilters,\r\n        context.filterValues,\r\n        context.hideFilter,\r\n        context.setFilters,\r\n        context.showFilter,\r\n    ]);\r\n};\r\nListFilterContext.displayName = 'ListFilterContext';\r\nexport default ListFilterContext;\r\n"]},"metadata":{},"sourceType":"module"}