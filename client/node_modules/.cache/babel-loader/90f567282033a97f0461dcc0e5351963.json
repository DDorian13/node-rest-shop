{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { useLocation, useHistory } from 'react-router-dom';\n/**\r\n * Get a callback for calling the authProvider.login() method\r\n * and redirect to the previous authenticated page (or the home page) on success.\r\n *\r\n * @see useAuthProvider\r\n *\r\n * @returns {Function} login callback\r\n *\r\n * @example\r\n *\r\n * import { useLogin } from 'react-admin';\r\n *\r\n * const LoginButton = () => {\r\n *     const [loading, setLoading] = useState(false);\r\n *     const login = useLogin();\r\n *     const handleClick = {\r\n *         setLoading(true);\r\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\r\n *             .then(() => setLoading(false));\r\n *     }\r\n *     return <button onClick={handleClick}>Login</button>;\r\n * }\r\n */\n\nvar useLogin = function () {\n  var authProvider = useAuthProvider();\n  var location = useLocation();\n  var locationState = location.state;\n  var history = useHistory();\n  var nextPathName = locationState && locationState.nextPathname;\n  var login = useCallback(function (params, pathName) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    return authProvider.login(params).then(function (ret) {\n      var redirectUrl = pathName ? pathName : nextPathName || defaultAuthParams.afterLoginUrl;\n      history.push(redirectUrl);\n      return ret;\n    });\n  }, [authProvider, history, nextPathName]);\n  var loginWithoutProvider = useCallback(function (_, __) {\n    history.push(defaultAuthParams.afterLoginUrl);\n    return Promise.resolve();\n  }, [history]);\n  return authProvider ? login : loginWithoutProvider;\n};\n\nexport default useLogin;","map":{"version":3,"sources":["C:/Users/Felhasználó/IdeaProjects/node-rest-shop/client/node_modules/ra-core/esm/auth/useLogin.js"],"names":["useCallback","useAuthProvider","defaultAuthParams","useLocation","useHistory","useLogin","authProvider","location","locationState","state","history","nextPathName","nextPathname","login","params","pathName","then","ret","redirectUrl","afterLoginUrl","push","loginWithoutProvider","_","__","Promise","resolve"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,eAAP,IAA0BC,iBAA1B,QAAmD,mBAAnD;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,kBAAxC;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAIC,QAAQ,GAAG,YAAY;AACvB,MAAIC,YAAY,GAAGL,eAAe,EAAlC;AACA,MAAIM,QAAQ,GAAGJ,WAAW,EAA1B;AACA,MAAIK,aAAa,GAAGD,QAAQ,CAACE,KAA7B;AACA,MAAIC,OAAO,GAAGN,UAAU,EAAxB;AACA,MAAIO,YAAY,GAAGH,aAAa,IAAIA,aAAa,CAACI,YAAlD;AACA,MAAIC,KAAK,GAAGb,WAAW,CAAC,UAAUc,MAAV,EAAkBC,QAAlB,EAA4B;AAChD,QAAID,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,EAAT;AAAc;;AACvC,WAAOR,YAAY,CAACO,KAAb,CAAmBC,MAAnB,EAA2BE,IAA3B,CAAgC,UAAUC,GAAV,EAAe;AAClD,UAAIC,WAAW,GAAGH,QAAQ,GACpBA,QADoB,GAEpBJ,YAAY,IAAIT,iBAAiB,CAACiB,aAFxC;AAGAT,MAAAA,OAAO,CAACU,IAAR,CAAaF,WAAb;AACA,aAAOD,GAAP;AACH,KANM,CAAP;AAOH,GATsB,EASpB,CAACX,YAAD,EAAeI,OAAf,EAAwBC,YAAxB,CAToB,CAAvB;AAUA,MAAIU,oBAAoB,GAAGrB,WAAW,CAAC,UAAUsB,CAAV,EAAaC,EAAb,EAAiB;AACpDb,IAAAA,OAAO,CAACU,IAAR,CAAalB,iBAAiB,CAACiB,aAA/B;AACA,WAAOK,OAAO,CAACC,OAAR,EAAP;AACH,GAHqC,EAGnC,CAACf,OAAD,CAHmC,CAAtC;AAIA,SAAOJ,YAAY,GAAGO,KAAH,GAAWQ,oBAA9B;AACH,CArBD;;AAsBA,eAAehB,QAAf","sourcesContent":["import { useCallback } from 'react';\r\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\n/**\r\n * Get a callback for calling the authProvider.login() method\r\n * and redirect to the previous authenticated page (or the home page) on success.\r\n *\r\n * @see useAuthProvider\r\n *\r\n * @returns {Function} login callback\r\n *\r\n * @example\r\n *\r\n * import { useLogin } from 'react-admin';\r\n *\r\n * const LoginButton = () => {\r\n *     const [loading, setLoading] = useState(false);\r\n *     const login = useLogin();\r\n *     const handleClick = {\r\n *         setLoading(true);\r\n *         login({ username: 'john', password: 'p@ssw0rd' }, '/posts')\r\n *             .then(() => setLoading(false));\r\n *     }\r\n *     return <button onClick={handleClick}>Login</button>;\r\n * }\r\n */\r\nvar useLogin = function () {\r\n    var authProvider = useAuthProvider();\r\n    var location = useLocation();\r\n    var locationState = location.state;\r\n    var history = useHistory();\r\n    var nextPathName = locationState && locationState.nextPathname;\r\n    var login = useCallback(function (params, pathName) {\r\n        if (params === void 0) { params = {}; }\r\n        return authProvider.login(params).then(function (ret) {\r\n            var redirectUrl = pathName\r\n                ? pathName\r\n                : nextPathName || defaultAuthParams.afterLoginUrl;\r\n            history.push(redirectUrl);\r\n            return ret;\r\n        });\r\n    }, [authProvider, history, nextPathName]);\r\n    var loginWithoutProvider = useCallback(function (_, __) {\r\n        history.push(defaultAuthParams.afterLoginUrl);\r\n        return Promise.resolve();\r\n    }, [history]);\r\n    return authProvider ? login : loginWithoutProvider;\r\n};\r\nexport default useLogin;\r\n"]},"metadata":{},"sourceType":"module"}