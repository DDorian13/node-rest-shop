{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport Polyglot from 'node-polyglot';\n/**\r\n * Build a polyglot-based i18nProvider based on a function returning the messages for a locale\r\n *\r\n * @example\r\n *\r\n * import { Admin, Resource, polyglotI18nProvider } from 'react-admin';\r\n * import englishMessages from 'ra-language-english';\r\n * import frenchMessages from 'ra-language-french';\r\n *\r\n * const messages = {\r\n *     fr: frenchMessages,\r\n *     en: englishMessages,\r\n * };\r\n * const i18nProvider = polyglotI18nProvider(locale => messages[locale])\r\n */\n\nexport default (function (getMessages, initialLocale, polyglotOptions) {\n  if (initialLocale === void 0) {\n    initialLocale = 'en';\n  }\n\n  if (polyglotOptions === void 0) {\n    polyglotOptions = {};\n  }\n\n  var locale = initialLocale;\n  var messages = getMessages(initialLocale);\n\n  if (messages instanceof Promise) {\n    throw new Error(\"The i18nProvider returned a Promise for the messages of the default locale (\" + initialLocale + \"). Please update your i18nProvider to return the messages of the default locale in a synchronous way.\");\n  }\n\n  var polyglot = new Polyglot(__assign({\n    locale: locale,\n    phrases: __assign({\n      '': ''\n    }, messages)\n  }, polyglotOptions));\n  var translate = polyglot.t.bind(polyglot);\n  return {\n    translate: function (key, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      return translate(key, options);\n    },\n    changeLocale: function (newLocale) {\n      // We systematically return a Promise for the messages because\n      // getMessages may return a Promise\n      return Promise.resolve(getMessages(newLocale)).then(function (messages) {\n        locale = newLocale;\n        var newPolyglot = new Polyglot(__assign({\n          locale: newLocale,\n          phrases: __assign({\n            '': ''\n          }, messages)\n        }, polyglotOptions));\n        translate = newPolyglot.t.bind(newPolyglot);\n      });\n    },\n    getLocale: function () {\n      return locale;\n    }\n  };\n});","map":{"version":3,"sources":["C:/Users/Felhasználó/IdeaProjects/node-rest-shop/client/node_modules/ra-i18n-polyglot/esm/index.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","Polyglot","getMessages","initialLocale","polyglotOptions","locale","messages","Promise","Error","polyglot","phrases","translate","bind","key","options","changeLocale","newLocale","resolve","then","newPolyglot","getLocale"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAOO,QAAP,MAAqB,eAArB;AACA;;;;;;;;;;;;;;;;AAeA,gBAAgB,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,eAAtC,EAAuD;AACnE,MAAID,aAAa,KAAK,KAAK,CAA3B,EAA8B;AAAEA,IAAAA,aAAa,GAAG,IAAhB;AAAuB;;AACvD,MAAIC,eAAe,KAAK,KAAK,CAA7B,EAAgC;AAAEA,IAAAA,eAAe,GAAG,EAAlB;AAAuB;;AACzD,MAAIC,MAAM,GAAGF,aAAb;AACA,MAAIG,QAAQ,GAAGJ,WAAW,CAACC,aAAD,CAA1B;;AACA,MAAIG,QAAQ,YAAYC,OAAxB,EAAiC;AAC7B,UAAM,IAAIC,KAAJ,CAAU,iFAAiFL,aAAjF,GAAiG,uGAA3G,CAAN;AACH;;AACD,MAAIM,QAAQ,GAAG,IAAIR,QAAJ,CAAad,QAAQ,CAAC;AAAEkB,IAAAA,MAAM,EAAEA,MAAV;AAAkBK,IAAAA,OAAO,EAAEvB,QAAQ,CAAC;AAAE,UAAI;AAAN,KAAD,EAAamB,QAAb;AAAnC,GAAD,EAA8DF,eAA9D,CAArB,CAAf;AACA,MAAIO,SAAS,GAAGF,QAAQ,CAACnB,CAAT,CAAWsB,IAAX,CAAgBH,QAAhB,CAAhB;AACA,SAAO;AACHE,IAAAA,SAAS,EAAE,UAAUE,GAAV,EAAeC,OAAf,EAAwB;AAC/B,UAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,QAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,aAAOH,SAAS,CAACE,GAAD,EAAMC,OAAN,CAAhB;AACH,KAJE;AAKHC,IAAAA,YAAY,EAAE,UAAUC,SAAV,EAAqB;AAC/B;AACA;AACA,aAAOT,OAAO,CAACU,OAAR,CAAgBf,WAAW,CAACc,SAAD,CAA3B,EAAwCE,IAAxC,CAA6C,UAAUZ,QAAV,EAAoB;AACpED,QAAAA,MAAM,GAAGW,SAAT;AACA,YAAIG,WAAW,GAAG,IAAIlB,QAAJ,CAAad,QAAQ,CAAC;AAAEkB,UAAAA,MAAM,EAAEW,SAAV;AAAqBN,UAAAA,OAAO,EAAEvB,QAAQ,CAAC;AAAE,gBAAI;AAAN,WAAD,EAAamB,QAAb;AAAtC,SAAD,EAAiEF,eAAjE,CAArB,CAAlB;AACAO,QAAAA,SAAS,GAAGQ,WAAW,CAAC7B,CAAZ,CAAcsB,IAAd,CAAmBO,WAAnB,CAAZ;AACH,OAJM,CAAP;AAKH,KAbE;AAcHC,IAAAA,SAAS,EAAE,YAAY;AAAE,aAAOf,MAAP;AAAgB;AAdtC,GAAP;AAgBH,CA1BD","sourcesContent":["var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport Polyglot from 'node-polyglot';\r\n/**\r\n * Build a polyglot-based i18nProvider based on a function returning the messages for a locale\r\n *\r\n * @example\r\n *\r\n * import { Admin, Resource, polyglotI18nProvider } from 'react-admin';\r\n * import englishMessages from 'ra-language-english';\r\n * import frenchMessages from 'ra-language-french';\r\n *\r\n * const messages = {\r\n *     fr: frenchMessages,\r\n *     en: englishMessages,\r\n * };\r\n * const i18nProvider = polyglotI18nProvider(locale => messages[locale])\r\n */\r\nexport default (function (getMessages, initialLocale, polyglotOptions) {\r\n    if (initialLocale === void 0) { initialLocale = 'en'; }\r\n    if (polyglotOptions === void 0) { polyglotOptions = {}; }\r\n    var locale = initialLocale;\r\n    var messages = getMessages(initialLocale);\r\n    if (messages instanceof Promise) {\r\n        throw new Error(\"The i18nProvider returned a Promise for the messages of the default locale (\" + initialLocale + \"). Please update your i18nProvider to return the messages of the default locale in a synchronous way.\");\r\n    }\r\n    var polyglot = new Polyglot(__assign({ locale: locale, phrases: __assign({ '': '' }, messages) }, polyglotOptions));\r\n    var translate = polyglot.t.bind(polyglot);\r\n    return {\r\n        translate: function (key, options) {\r\n            if (options === void 0) { options = {}; }\r\n            return translate(key, options);\r\n        },\r\n        changeLocale: function (newLocale) {\r\n            // We systematically return a Promise for the messages because\r\n            // getMessages may return a Promise\r\n            return Promise.resolve(getMessages(newLocale)).then(function (messages) {\r\n                locale = newLocale;\r\n                var newPolyglot = new Polyglot(__assign({ locale: newLocale, phrases: __assign({ '': '' }, messages) }, polyglotOptions));\r\n                translate = newPolyglot.t.bind(newPolyglot);\r\n            });\r\n        },\r\n        getLocale: function () { return locale; },\r\n    };\r\n});\r\n"]},"metadata":{},"sourceType":"module"}