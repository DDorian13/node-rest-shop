{"ast":null,"code":"import useMutation from './useMutation';\n/**\r\n * Get a callback to call the dataProvider.create() method, the result and the loading state.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: [callback, { loading: true, loaded: false }]\r\n * - success: [callback, { data: [data from response], loading: false, loaded: true }]\r\n * - error: [callback, { error: [error from response], loading: false, loaded: true }]\r\n *\r\n * @param resource The resource name, e.g. 'posts'\r\n * @param data The data to initialize the new record with, e.g. { title: 'hello, world\" }\r\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as [create, { data, error, loading, loaded }].\r\n *\r\n * @example\r\n *\r\n * import { useCreate } from 'react-admin';\r\n *\r\n * const LikeButton = ({ record }) => {\r\n *     const like = { postId: record.id };\r\n *     const [create, { loading, error }] = useCreate('likes', like);\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <button disabled={loading} onClick={create}>Like</button>;\r\n * };\r\n */\n\nvar useCreate = function (resource, data, options) {\n  if (data === void 0) {\n    data = {};\n  }\n\n  return useMutation({\n    type: 'create',\n    resource: resource,\n    payload: {\n      data: data\n    }\n  }, options);\n};\n\nexport default useCreate;","map":{"version":3,"sources":["C:/Users/Felhasználó/IdeaProjects/node-rest-shop/client/node_modules/ra-core/esm/dataProvider/useCreate.js"],"names":["useMutation","useCreate","resource","data","options","type","payload"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,IAAIC,SAAS,GAAG,UAAUC,QAAV,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmC;AAC/C,MAAID,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,IAAAA,IAAI,GAAG,EAAP;AAAY;;AACnC,SAAOH,WAAW,CAAC;AAAEK,IAAAA,IAAI,EAAE,QAAR;AAAkBH,IAAAA,QAAQ,EAAEA,QAA5B;AAAsCI,IAAAA,OAAO,EAAE;AAAEH,MAAAA,IAAI,EAAEA;AAAR;AAA/C,GAAD,EAAkEC,OAAlE,CAAlB;AACH,CAHD;;AAIA,eAAeH,SAAf","sourcesContent":["import useMutation from './useMutation';\r\n/**\r\n * Get a callback to call the dataProvider.create() method, the result and the loading state.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: [callback, { loading: true, loaded: false }]\r\n * - success: [callback, { data: [data from response], loading: false, loaded: true }]\r\n * - error: [callback, { error: [error from response], loading: false, loaded: true }]\r\n *\r\n * @param resource The resource name, e.g. 'posts'\r\n * @param data The data to initialize the new record with, e.g. { title: 'hello, world\" }\r\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as [create, { data, error, loading, loaded }].\r\n *\r\n * @example\r\n *\r\n * import { useCreate } from 'react-admin';\r\n *\r\n * const LikeButton = ({ record }) => {\r\n *     const like = { postId: record.id };\r\n *     const [create, { loading, error }] = useCreate('likes', like);\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <button disabled={loading} onClick={create}>Like</button>;\r\n * };\r\n */\r\nvar useCreate = function (resource, data, options) {\r\n    if (data === void 0) { data = {}; }\r\n    return useMutation({ type: 'create', resource: resource, payload: { data: data } }, options);\r\n};\r\nexport default useCreate;\r\n"]},"metadata":{},"sourceType":"module"}