{"ast":null,"code":"import { useCallback } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { setListSelectedIds, toggleListItem } from '../actions/listActions';\nvar defaultRecords = [];\n/**\r\n * Get the list of selected items for a resource, and callbacks to change the selection\r\n *\r\n * @param resource The resource name, e.g. 'posts'\r\n *\r\n * @returns {Object} Destructure as [selectedIds, { select, toggle, clearSelection }].\r\n */\n\nvar useSelectItems = function (resource) {\n  var dispatch = useDispatch();\n  var selectedIds = useSelector(function (reduxState) {\n    return reduxState.admin.resources[resource] ? reduxState.admin.resources[resource].list.selectedIds : defaultRecords;\n  }, shallowEqual);\n  var selectionModifiers = {\n    select: useCallback(function (newIds) {\n      dispatch(setListSelectedIds(resource, newIds));\n    }, [resource] // eslint-disable-line react-hooks/exhaustive-deps\n    ),\n    toggle: useCallback(function (id) {\n      dispatch(toggleListItem(resource, id));\n    }, [resource] // eslint-disable-line react-hooks/exhaustive-deps\n    ),\n    clearSelection: useCallback(function () {\n      dispatch(setListSelectedIds(resource, []));\n    }, [resource])\n  };\n  return [selectedIds, selectionModifiers];\n};\n\nexport default useSelectItems;","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/ra-core/esm/controller/useRecordSelection.js"],"names":["useCallback","useSelector","useDispatch","shallowEqual","setListSelectedIds","toggleListItem","defaultRecords","useSelectItems","resource","dispatch","selectedIds","reduxState","admin","resources","list","selectionModifiers","select","newIds","toggle","id","clearSelection"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,YAAnC,QAAuD,aAAvD;AACA,SAASC,kBAAT,EAA6BC,cAA7B,QAAmD,wBAAnD;AACA,IAAIC,cAAc,GAAG,EAArB;AACA;;;;;;;;AAOA,IAAIC,cAAc,GAAG,UAAUC,QAAV,EAAoB;AACrC,MAAIC,QAAQ,GAAGP,WAAW,EAA1B;AACA,MAAIQ,WAAW,GAAGT,WAAW,CAAC,UAAUU,UAAV,EAAsB;AAChD,WAAOA,UAAU,CAACC,KAAX,CAAiBC,SAAjB,CAA2BL,QAA3B,IACDG,UAAU,CAACC,KAAX,CAAiBC,SAAjB,CAA2BL,QAA3B,EAAqCM,IAArC,CAA0CJ,WADzC,GAEDJ,cAFN;AAGH,GAJ4B,EAI1BH,YAJ0B,CAA7B;AAKA,MAAIY,kBAAkB,GAAG;AACrBC,IAAAA,MAAM,EAAEhB,WAAW,CAAC,UAAUiB,MAAV,EAAkB;AAClCR,MAAAA,QAAQ,CAACL,kBAAkB,CAACI,QAAD,EAAWS,MAAX,CAAnB,CAAR;AACH,KAFkB,EAEhB,CAACT,QAAD,CAFgB,CAEL;AAFK,KADE;AAKrBU,IAAAA,MAAM,EAAElB,WAAW,CAAC,UAAUmB,EAAV,EAAc;AAC9BV,MAAAA,QAAQ,CAACJ,cAAc,CAACG,QAAD,EAAWW,EAAX,CAAf,CAAR;AACH,KAFkB,EAEhB,CAACX,QAAD,CAFgB,CAEL;AAFK,KALE;AASrBY,IAAAA,cAAc,EAAEpB,WAAW,CAAC,YAAY;AACpCS,MAAAA,QAAQ,CAACL,kBAAkB,CAACI,QAAD,EAAW,EAAX,CAAnB,CAAR;AACH,KAF0B,EAExB,CAACA,QAAD,CAFwB;AATN,GAAzB;AAaA,SAAO,CAACE,WAAD,EAAcK,kBAAd,CAAP;AACH,CArBD;;AAsBA,eAAeR,cAAf","sourcesContent":["import { useCallback } from 'react';\r\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\r\nimport { setListSelectedIds, toggleListItem } from '../actions/listActions';\r\nvar defaultRecords = [];\r\n/**\r\n * Get the list of selected items for a resource, and callbacks to change the selection\r\n *\r\n * @param resource The resource name, e.g. 'posts'\r\n *\r\n * @returns {Object} Destructure as [selectedIds, { select, toggle, clearSelection }].\r\n */\r\nvar useSelectItems = function (resource) {\r\n    var dispatch = useDispatch();\r\n    var selectedIds = useSelector(function (reduxState) {\r\n        return reduxState.admin.resources[resource]\r\n            ? reduxState.admin.resources[resource].list.selectedIds\r\n            : defaultRecords;\r\n    }, shallowEqual);\r\n    var selectionModifiers = {\r\n        select: useCallback(function (newIds) {\r\n            dispatch(setListSelectedIds(resource, newIds));\r\n        }, [resource] // eslint-disable-line react-hooks/exhaustive-deps\r\n        ),\r\n        toggle: useCallback(function (id) {\r\n            dispatch(toggleListItem(resource, id));\r\n        }, [resource] // eslint-disable-line react-hooks/exhaustive-deps\r\n        ),\r\n        clearSelection: useCallback(function () {\r\n            dispatch(setListSelectedIds(resource, []));\r\n        }, [resource]),\r\n    };\r\n    return [selectedIds, selectionModifiers];\r\n};\r\nexport default useSelectItems;\r\n"]},"metadata":{},"sourceType":"module"}