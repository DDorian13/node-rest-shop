{"ast":null,"code":"import * as React from 'react';\nimport ListContext from './ListContext';\nimport ListFilterContext, { usePickFilterContext } from './ListFilterContext';\nimport ListSortContext, { usePickSortContext } from './ListSortContext';\nimport ListPaginationContext, { usePickPaginationContext } from './ListPaginationContext';\n/**\r\n * Create a List Context and several thematic List subcontext.\r\n *\r\n * Allows children to subscribe to part of the ListContext, and bail out of\r\n * rendering when some parts of the context that they don't depend on change\r\n * (because unfortunately React doesn't allow to use context selectors yet).\r\n *\r\n * @example\r\n *\r\n * const MyList = (props) => {\r\n *     const controllerProps = useListController(props);\r\n *     return (\r\n *         <ListContextProvider value={controllerProps}>\r\n *             <MyListView>\r\n *         </ListContextProvider>\r\n *     );\r\n * };\r\n *\r\n * const MyListView = () => {\r\n *     const { data, ids, filterValues, setFilters } = useListContext();\r\n *     // or, to rerender only when filters change but not data\r\n *     const { filterValues, setFilters } = useListFilterContext();\r\n * }\r\n *\r\n * @see ListContext\r\n * @see ListFilterContext\r\n */\n\nvar ListContextProvider = function (_a) {\n  var value = _a.value,\n      children = _a.children;\n  return React.createElement(ListContext.Provider, {\n    value: value\n  }, React.createElement(ListFilterContext.Provider, {\n    value: usePickFilterContext(value)\n  }, React.createElement(ListSortContext.Provider, {\n    value: usePickSortContext(value)\n  }, React.createElement(ListPaginationContext.Provider, {\n    value: usePickPaginationContext(value)\n  }, children))));\n};\n\nexport default ListContextProvider;","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/ra-core/esm/controller/ListContextProvider.js"],"names":["React","ListContext","ListFilterContext","usePickFilterContext","ListSortContext","usePickSortContext","ListPaginationContext","usePickPaginationContext","ListContextProvider","_a","value","children","createElement","Provider"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,iBAAP,IAA4BC,oBAA5B,QAAwD,qBAAxD;AACA,OAAOC,eAAP,IAA0BC,kBAA1B,QAAoD,mBAApD;AACA,OAAOC,qBAAP,IAAgCC,wBAAhC,QAAiE,yBAAjE;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAIC,mBAAmB,GAAG,UAAUC,EAAV,EAAc;AACpC,MAAIC,KAAK,GAAGD,EAAE,CAACC,KAAf;AAAA,MAAsBC,QAAQ,GAAGF,EAAE,CAACE,QAApC;AACA,SAAQX,KAAK,CAACY,aAAN,CAAoBX,WAAW,CAACY,QAAhC,EAA0C;AAAEH,IAAAA,KAAK,EAAEA;AAAT,GAA1C,EACJV,KAAK,CAACY,aAAN,CAAoBV,iBAAiB,CAACW,QAAtC,EAAgD;AAAEH,IAAAA,KAAK,EAAEP,oBAAoB,CAACO,KAAD;AAA7B,GAAhD,EACIV,KAAK,CAACY,aAAN,CAAoBR,eAAe,CAACS,QAApC,EAA8C;AAAEH,IAAAA,KAAK,EAAEL,kBAAkB,CAACK,KAAD;AAA3B,GAA9C,EACIV,KAAK,CAACY,aAAN,CAAoBN,qBAAqB,CAACO,QAA1C,EAAoD;AAAEH,IAAAA,KAAK,EAAEH,wBAAwB,CAACG,KAAD;AAAjC,GAApD,EAAgGC,QAAhG,CADJ,CADJ,CADI,CAAR;AAIH,CAND;;AAOA,eAAeH,mBAAf","sourcesContent":["import * as React from 'react';\r\nimport ListContext from './ListContext';\r\nimport ListFilterContext, { usePickFilterContext } from './ListFilterContext';\r\nimport ListSortContext, { usePickSortContext } from './ListSortContext';\r\nimport ListPaginationContext, { usePickPaginationContext, } from './ListPaginationContext';\r\n/**\r\n * Create a List Context and several thematic List subcontext.\r\n *\r\n * Allows children to subscribe to part of the ListContext, and bail out of\r\n * rendering when some parts of the context that they don't depend on change\r\n * (because unfortunately React doesn't allow to use context selectors yet).\r\n *\r\n * @example\r\n *\r\n * const MyList = (props) => {\r\n *     const controllerProps = useListController(props);\r\n *     return (\r\n *         <ListContextProvider value={controllerProps}>\r\n *             <MyListView>\r\n *         </ListContextProvider>\r\n *     );\r\n * };\r\n *\r\n * const MyListView = () => {\r\n *     const { data, ids, filterValues, setFilters } = useListContext();\r\n *     // or, to rerender only when filters change but not data\r\n *     const { filterValues, setFilters } = useListFilterContext();\r\n * }\r\n *\r\n * @see ListContext\r\n * @see ListFilterContext\r\n */\r\nvar ListContextProvider = function (_a) {\r\n    var value = _a.value, children = _a.children;\r\n    return (React.createElement(ListContext.Provider, { value: value },\r\n        React.createElement(ListFilterContext.Provider, { value: usePickFilterContext(value) },\r\n            React.createElement(ListSortContext.Provider, { value: usePickSortContext(value) },\r\n                React.createElement(ListPaginationContext.Provider, { value: usePickPaginationContext(value) }, children)))));\r\n};\r\nexport default ListContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}