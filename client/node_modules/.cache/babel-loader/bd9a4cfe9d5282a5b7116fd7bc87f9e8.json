{"ast":null,"code":"var removeDiacritics = require('diacritic').clean; // https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\n\n\nvar specialCharsRegex = /[.*+?^${}()|[\\]\\\\]/g; // http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.6\n\nvar wordCharacterRegex = /[a-z0-9_]/i;\nvar whitespacesRegex = /\\s+/;\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(specialCharsRegex, '\\\\$&');\n}\n\nmodule.exports = function match(text, query) {\n  text = removeDiacritics(text);\n  query = removeDiacritics(query);\n  return query.trim().split(whitespacesRegex) // If query is blank, we'll get empty string here, so let's filter it out.\n  .filter(function (word) {\n    return word.length > 0;\n  }).reduce(function (result, word) {\n    var wordLen = word.length;\n    var prefix = wordCharacterRegex.test(word[0]) ? '\\\\b' : '';\n    var regex = new RegExp(prefix + escapeRegexCharacters(word), 'i');\n    var index = text.search(regex);\n\n    if (index > -1) {\n      result.push([index, index + wordLen]); // Replace what we just found with spaces so we don't find it again.\n\n      text = text.slice(0, index) + new Array(wordLen + 1).join(' ') + text.slice(index + wordLen);\n    }\n\n    return result;\n  }, []).sort(function (match1, match2) {\n    return match1[0] - match2[0];\n  });\n};","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/autosuggest-highlight/match/index.js"],"names":["removeDiacritics","require","clean","specialCharsRegex","wordCharacterRegex","whitespacesRegex","escapeRegexCharacters","str","replace","module","exports","match","text","query","trim","split","filter","word","length","reduce","result","wordLen","prefix","test","regex","RegExp","index","search","push","slice","Array","join","sort","match1","match2"],"mappings":"AAAA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBC,KAA5C,C,CAEA;;;AACA,IAAIC,iBAAiB,GAAG,qBAAxB,C,CAEA;;AACA,IAAIC,kBAAkB,GAAG,YAAzB;AAEA,IAAIC,gBAAgB,GAAG,KAAvB;;AAEA,SAASC,qBAAT,CAA+BC,GAA/B,EAAoC;AAClC,SAAOA,GAAG,CAACC,OAAJ,CAAYL,iBAAZ,EAA+B,MAA/B,CAAP;AACD;;AAEDM,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4B;AAC3CD,EAAAA,IAAI,GAAGZ,gBAAgB,CAACY,IAAD,CAAvB;AACAC,EAAAA,KAAK,GAAGb,gBAAgB,CAACa,KAAD,CAAxB;AAEA,SACEA,KAAK,CACFC,IADH,GAEGC,KAFH,CAESV,gBAFT,EAGE;AAHF,GAIGW,MAJH,CAIU,UAASC,IAAT,EAAe;AACrB,WAAOA,IAAI,CAACC,MAAL,GAAc,CAArB;AACD,GANH,EAOGC,MAPH,CAOU,UAASC,MAAT,EAAiBH,IAAjB,EAAuB;AAC7B,QAAII,OAAO,GAAGJ,IAAI,CAACC,MAAnB;AACA,QAAII,MAAM,GAAGlB,kBAAkB,CAACmB,IAAnB,CAAwBN,IAAI,CAAC,CAAD,CAA5B,IAAmC,KAAnC,GAA2C,EAAxD;AACA,QAAIO,KAAK,GAAG,IAAIC,MAAJ,CAAWH,MAAM,GAAGhB,qBAAqB,CAACW,IAAD,CAAzC,EAAiD,GAAjD,CAAZ;AACA,QAAIS,KAAK,GAAGd,IAAI,CAACe,MAAL,CAAYH,KAAZ,CAAZ;;AAEA,QAAIE,KAAK,GAAG,CAAC,CAAb,EAAgB;AACdN,MAAAA,MAAM,CAACQ,IAAP,CAAY,CAACF,KAAD,EAAQA,KAAK,GAAGL,OAAhB,CAAZ,EADc,CAGd;;AACAT,MAAAA,IAAI,GACFA,IAAI,CAACiB,KAAL,CAAW,CAAX,EAAcH,KAAd,IACA,IAAII,KAAJ,CAAUT,OAAO,GAAG,CAApB,EAAuBU,IAAvB,CAA4B,GAA5B,CADA,GAEAnB,IAAI,CAACiB,KAAL,CAAWH,KAAK,GAAGL,OAAnB,CAHF;AAID;;AAED,WAAOD,MAAP;AACD,GAxBH,EAwBK,EAxBL,EAyBGY,IAzBH,CAyBQ,UAASC,MAAT,EAAiBC,MAAjB,EAAyB;AAC7B,WAAOD,MAAM,CAAC,CAAD,CAAN,GAAYC,MAAM,CAAC,CAAD,CAAzB;AACD,GA3BH,CADF;AA8BD,CAlCD","sourcesContent":["var removeDiacritics = require('diacritic').clean;\r\n\r\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\r\nvar specialCharsRegex = /[.*+?^${}()|[\\]\\\\]/g;\r\n\r\n// http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.6\r\nvar wordCharacterRegex = /[a-z0-9_]/i;\r\n\r\nvar whitespacesRegex = /\\s+/;\r\n\r\nfunction escapeRegexCharacters(str) {\r\n  return str.replace(specialCharsRegex, '\\\\$&');\r\n}\r\n\r\nmodule.exports = function match(text, query) {\r\n  text = removeDiacritics(text);\r\n  query = removeDiacritics(query);\r\n\r\n  return (\r\n    query\r\n      .trim()\r\n      .split(whitespacesRegex)\r\n      // If query is blank, we'll get empty string here, so let's filter it out.\r\n      .filter(function(word) {\r\n        return word.length > 0;\r\n      })\r\n      .reduce(function(result, word) {\r\n        var wordLen = word.length;\r\n        var prefix = wordCharacterRegex.test(word[0]) ? '\\\\b' : '';\r\n        var regex = new RegExp(prefix + escapeRegexCharacters(word), 'i');\r\n        var index = text.search(regex);\r\n\r\n        if (index > -1) {\r\n          result.push([index, index + wordLen]);\r\n\r\n          // Replace what we just found with spaces so we don't find it again.\r\n          text =\r\n            text.slice(0, index) +\r\n            new Array(wordLen + 1).join(' ') +\r\n            text.slice(index + wordLen);\r\n        }\r\n\r\n        return result;\r\n      }, [])\r\n      .sort(function(match1, match2) {\r\n        return match1[0] - match2[0];\r\n      })\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"script"}