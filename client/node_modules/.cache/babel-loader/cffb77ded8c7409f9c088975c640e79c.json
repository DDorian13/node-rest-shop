{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useSelector } from 'react-redux';\nimport get from 'lodash/get';\nimport { CRUD_GET_MATCHING } from '../actions/dataActions/crudGetMatching';\nimport useQueryWithStore from './useQueryWithStore';\nimport { getReferenceResource, getPossibleReferenceValues, getPossibleReferences } from '../reducer';\n\nvar referenceSource = function (resource, source) {\n  return resource + \"@\" + source;\n};\n/**\r\n * Call the dataProvider.getList() method return the resolved result\r\n * as well as the loading state.\r\n *\r\n * React-admin uses a different store location for the result of this query\r\n * than for useGetList(). Therefore, calling useGetMatching() does not modify\r\n * the ids and total for the resource.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: { loading: true, loaded: false }\r\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true }\r\n * - error: { error: [error from response], loading: false, loaded: true }\r\n *\r\n * This hook will return the cached result when called a second time\r\n * with the same parameters, until the response arrives.\r\n *\r\n * @param {string} resource The referenced resource name, e.g. 'tags'\r\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\r\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\r\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\r\n * @param {string} source The field in resource containing the ids of the referenced records, e.g. 'tag_ids'\r\n * @param {string} referencingResource The resource name, e.g. 'posts'. Used to build a cache key\r\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded }.\r\n *\r\n * @example\r\n *\r\n * import { useGetMatching } from 'react-admin';\r\n *\r\n * const PostTags = () => {\r\n *     // call dataProvider.getList('tags', { pagination: { page: 1, perPage: 10 }, sort: { { field: 'published_at', order: 'DESC' } } })\r\n *     const { data, loading, error } = useGetMatching(\r\n *         'tags',\r\n *         { page: 1, perPage: 10 },\r\n *         { field: 'published_at', order: 'DESC' },\r\n *         {},\r\n *         'tag_ids',\r\n *         'posts',\r\n *     );\r\n *     if (loading) { return <Loading />; }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <ul>{data.map(tag =>\r\n *         <li key={tag.id}>{tag.name}</li>\r\n *     )}</ul>;\r\n * };\r\n */\n\n\nvar useGetMatching = function (resource, pagination, sort, filter, source, referencingResource, options) {\n  var relatedTo = referenceSource(referencingResource, source);\n  var payload = {\n    pagination: pagination,\n    sort: sort,\n    filter: filter\n  };\n\n  var _a = useQueryWithStore({\n    type: 'getList',\n    resource: resource,\n    payload: payload\n  }, __assign(__assign({}, options), {\n    relatedTo: relatedTo,\n    action: CRUD_GET_MATCHING\n  }), function (state) {\n    return getPossibleReferenceValues(state, {\n      referenceSource: referenceSource,\n      resource: referencingResource,\n      source: source\n    });\n  }, function (state) {\n    return get(state.admin.resources, [resource, 'list', 'cachedRequests', JSON.stringify(payload), 'total'], null);\n  }),\n      possibleValues = _a.data,\n      total = _a.total,\n      error = _a.error,\n      loading = _a.loading,\n      loaded = _a.loaded;\n\n  var referenceState = useSelector(function (state) {\n    return getReferenceResource(state, {\n      reference: resource\n    });\n  });\n  var possibleReferences = getPossibleReferences(referenceState, possibleValues, []);\n  return {\n    data: possibleReferences,\n    ids: possibleValues,\n    total: total,\n    error: error,\n    loading: loading,\n    loaded: loaded\n  };\n};\n\nexport default useGetMatching;","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/ra-core/esm/dataProvider/useGetMatching.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useSelector","get","CRUD_GET_MATCHING","useQueryWithStore","getReferenceResource","getPossibleReferenceValues","getPossibleReferences","referenceSource","resource","source","useGetMatching","pagination","sort","filter","referencingResource","options","relatedTo","payload","_a","type","action","state","admin","resources","JSON","stringify","possibleValues","data","total","error","loading","loaded","referenceState","reference","possibleReferences","ids"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport { useSelector } from 'react-redux';\r\nimport get from 'lodash/get';\r\nimport { CRUD_GET_MATCHING } from '../actions/dataActions/crudGetMatching';\r\nimport useQueryWithStore from './useQueryWithStore';\r\nimport { getReferenceResource, getPossibleReferenceValues, getPossibleReferences, } from '../reducer';\r\nvar referenceSource = function (resource, source) { return resource + \"@\" + source; };\r\n/**\r\n * Call the dataProvider.getList() method return the resolved result\r\n * as well as the loading state.\r\n *\r\n * React-admin uses a different store location for the result of this query\r\n * than for useGetList(). Therefore, calling useGetMatching() does not modify\r\n * the ids and total for the resource.\r\n *\r\n * The return value updates according to the request state:\r\n *\r\n * - start: { loading: true, loaded: false }\r\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true }\r\n * - error: { error: [error from response], loading: false, loaded: true }\r\n *\r\n * This hook will return the cached result when called a second time\r\n * with the same parameters, until the response arrives.\r\n *\r\n * @param {string} resource The referenced resource name, e.g. 'tags'\r\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\r\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\r\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\r\n * @param {string} source The field in resource containing the ids of the referenced records, e.g. 'tag_ids'\r\n * @param {string} referencingResource The resource name, e.g. 'posts'. Used to build a cache key\r\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\r\n *\r\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded }.\r\n *\r\n * @example\r\n *\r\n * import { useGetMatching } from 'react-admin';\r\n *\r\n * const PostTags = () => {\r\n *     // call dataProvider.getList('tags', { pagination: { page: 1, perPage: 10 }, sort: { { field: 'published_at', order: 'DESC' } } })\r\n *     const { data, loading, error } = useGetMatching(\r\n *         'tags',\r\n *         { page: 1, perPage: 10 },\r\n *         { field: 'published_at', order: 'DESC' },\r\n *         {},\r\n *         'tag_ids',\r\n *         'posts',\r\n *     );\r\n *     if (loading) { return <Loading />; }\r\n *     if (error) { return <p>ERROR</p>; }\r\n *     return <ul>{data.map(tag =>\r\n *         <li key={tag.id}>{tag.name}</li>\r\n *     )}</ul>;\r\n * };\r\n */\r\nvar useGetMatching = function (resource, pagination, sort, filter, source, referencingResource, options) {\r\n    var relatedTo = referenceSource(referencingResource, source);\r\n    var payload = { pagination: pagination, sort: sort, filter: filter };\r\n    var _a = useQueryWithStore({\r\n        type: 'getList',\r\n        resource: resource,\r\n        payload: payload,\r\n    }, __assign(__assign({}, options), { relatedTo: relatedTo, action: CRUD_GET_MATCHING }), function (state) {\r\n        return getPossibleReferenceValues(state, {\r\n            referenceSource: referenceSource,\r\n            resource: referencingResource,\r\n            source: source,\r\n        });\r\n    }, function (state) {\r\n        return get(state.admin.resources, [\r\n            resource,\r\n            'list',\r\n            'cachedRequests',\r\n            JSON.stringify(payload),\r\n            'total',\r\n        ], null);\r\n    }), possibleValues = _a.data, total = _a.total, error = _a.error, loading = _a.loading, loaded = _a.loaded;\r\n    var referenceState = useSelector(function (state) {\r\n        return getReferenceResource(state, {\r\n            reference: resource,\r\n        });\r\n    });\r\n    var possibleReferences = getPossibleReferences(referenceState, possibleValues, []);\r\n    return {\r\n        data: possibleReferences,\r\n        ids: possibleValues,\r\n        total: total,\r\n        error: error,\r\n        loading: loading,\r\n        loaded: loaded,\r\n    };\r\n};\r\nexport default useGetMatching;\r\n"]},"metadata":{},"sourceType":"module"}