{"ast":null,"code":"import { createContext, useRef } from 'react';\nexport var SideEffectContext = createContext({});\n/**\r\n * Get modifiers for a save() function, and the way to update them.\r\n *\r\n * Used in useCreateController and useEditController.\r\n *\r\n * @example\r\n *\r\n * const {\r\n *     onSuccessRef,\r\n *     setOnSuccess,\r\n *     onFailureRef,\r\n *     setOnFailure,\r\n *     transformRef,\r\n *     setTransform,\r\n * } = useSaveModifiers({ onSuccess, onFailure, transform });\r\n */\n\nexport var useSaveModifiers = function (_a) {\n  var onSuccess = _a.onSuccess,\n      onFailure = _a.onFailure,\n      transform = _a.transform;\n  var onSuccessRef = useRef(onSuccess);\n\n  var setOnSuccess = function (onSuccess) {\n    onSuccessRef.current = function (response) {\n      // reset onSuccess for next submission\n      onSuccessRef.current = undefined;\n      return onSuccess(response);\n    };\n  };\n\n  var onFailureRef = useRef(onFailure);\n\n  var setOnFailure = function (onFailure) {\n    onFailureRef.current = function (error) {\n      // reset onSuccess for next submission\n      onFailureRef.current = undefined;\n      return onFailure(error);\n    };\n  };\n\n  var transformRef = useRef(transform);\n\n  var setTransform = function (transform) {\n    transformRef.current = function (data) {\n      // reset transform for next submission\n      transformRef.current = undefined;\n      return transform(data);\n    };\n  };\n\n  return {\n    onSuccessRef: onSuccessRef,\n    setOnSuccess: setOnSuccess,\n    onFailureRef: onFailureRef,\n    setOnFailure: setOnFailure,\n    transformRef: transformRef,\n    setTransform: setTransform\n  };\n};","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/ra-core/esm/controller/saveModifiers.js"],"names":["createContext","useRef","SideEffectContext","useSaveModifiers","_a","onSuccess","onFailure","transform","onSuccessRef","setOnSuccess","current","response","undefined","onFailureRef","setOnFailure","error","transformRef","setTransform","data"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,MAAxB,QAAsC,OAAtC;AACA,OAAO,IAAIC,iBAAiB,GAAGF,aAAa,CAAC,EAAD,CAArC;AACP;;;;;;;;;;;;;;;;;AAgBA,OAAO,IAAIG,gBAAgB,GAAG,UAAUC,EAAV,EAAc;AACxC,MAAIC,SAAS,GAAGD,EAAE,CAACC,SAAnB;AAAA,MAA8BC,SAAS,GAAGF,EAAE,CAACE,SAA7C;AAAA,MAAwDC,SAAS,GAAGH,EAAE,CAACG,SAAvE;AACA,MAAIC,YAAY,GAAGP,MAAM,CAACI,SAAD,CAAzB;;AACA,MAAII,YAAY,GAAG,UAAUJ,SAAV,EAAqB;AACpCG,IAAAA,YAAY,CAACE,OAAb,GAAuB,UAAUC,QAAV,EAAoB;AACvC;AACAH,MAAAA,YAAY,CAACE,OAAb,GAAuBE,SAAvB;AACA,aAAOP,SAAS,CAACM,QAAD,CAAhB;AACH,KAJD;AAKH,GAND;;AAOA,MAAIE,YAAY,GAAGZ,MAAM,CAACK,SAAD,CAAzB;;AACA,MAAIQ,YAAY,GAAG,UAAUR,SAAV,EAAqB;AACpCO,IAAAA,YAAY,CAACH,OAAb,GAAuB,UAAUK,KAAV,EAAiB;AACpC;AACAF,MAAAA,YAAY,CAACH,OAAb,GAAuBE,SAAvB;AACA,aAAON,SAAS,CAACS,KAAD,CAAhB;AACH,KAJD;AAKH,GAND;;AAOA,MAAIC,YAAY,GAAGf,MAAM,CAACM,SAAD,CAAzB;;AACA,MAAIU,YAAY,GAAG,UAAUV,SAAV,EAAqB;AACpCS,IAAAA,YAAY,CAACN,OAAb,GAAuB,UAAUQ,IAAV,EAAgB;AACnC;AACAF,MAAAA,YAAY,CAACN,OAAb,GAAuBE,SAAvB;AACA,aAAOL,SAAS,CAACW,IAAD,CAAhB;AACH,KAJD;AAKH,GAND;;AAOA,SAAO;AACHV,IAAAA,YAAY,EAAEA,YADX;AAEHC,IAAAA,YAAY,EAAEA,YAFX;AAGHI,IAAAA,YAAY,EAAEA,YAHX;AAIHC,IAAAA,YAAY,EAAEA,YAJX;AAKHE,IAAAA,YAAY,EAAEA,YALX;AAMHC,IAAAA,YAAY,EAAEA;AANX,GAAP;AAQH,CAlCM","sourcesContent":["import { createContext, useRef } from 'react';\r\nexport var SideEffectContext = createContext({});\r\n/**\r\n * Get modifiers for a save() function, and the way to update them.\r\n *\r\n * Used in useCreateController and useEditController.\r\n *\r\n * @example\r\n *\r\n * const {\r\n *     onSuccessRef,\r\n *     setOnSuccess,\r\n *     onFailureRef,\r\n *     setOnFailure,\r\n *     transformRef,\r\n *     setTransform,\r\n * } = useSaveModifiers({ onSuccess, onFailure, transform });\r\n */\r\nexport var useSaveModifiers = function (_a) {\r\n    var onSuccess = _a.onSuccess, onFailure = _a.onFailure, transform = _a.transform;\r\n    var onSuccessRef = useRef(onSuccess);\r\n    var setOnSuccess = function (onSuccess) {\r\n        onSuccessRef.current = function (response) {\r\n            // reset onSuccess for next submission\r\n            onSuccessRef.current = undefined;\r\n            return onSuccess(response);\r\n        };\r\n    };\r\n    var onFailureRef = useRef(onFailure);\r\n    var setOnFailure = function (onFailure) {\r\n        onFailureRef.current = function (error) {\r\n            // reset onSuccess for next submission\r\n            onFailureRef.current = undefined;\r\n            return onFailure(error);\r\n        };\r\n    };\r\n    var transformRef = useRef(transform);\r\n    var setTransform = function (transform) {\r\n        transformRef.current = function (data) {\r\n            // reset transform for next submission\r\n            transformRef.current = undefined;\r\n            return transform(data);\r\n        };\r\n    };\r\n    return {\r\n        onSuccessRef: onSuccessRef,\r\n        setOnSuccess: setOnSuccess,\r\n        onFailureRef: onFailureRef,\r\n        setOnFailure: setOnFailure,\r\n        transformRef: transformRef,\r\n        setTransform: setTransform,\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}