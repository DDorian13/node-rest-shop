{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport merge from 'lodash/merge';\nimport { DEFAULT_LOCALE } from './index';\n/**\r\n * Resolve the browser locale according to the value of the global window.navigator\r\n *\r\n * Use it to determine the <Admin> locale at runtime.\r\n *\r\n * @example\r\n *     import * as React from \"react\";\r\n *     import { Admin, Resource, resolveBrowserLocale } from 'react-admin';\r\n *     import englishMessages from 'ra-language-english';\r\n *     import frenchMessages from 'ra-language-french';\r\n *     const messages = {\r\n *        fr: frenchMessages,\r\n *        en: englishMessages,\r\n *     };\r\n *     const App = () => (\r\n *         <Admin locale={resolveBrowserLocale()} messages={messages}>\r\n *             ...\r\n *         </Admin>\r\n *     );\r\n *\r\n * @param {string} defaultLocale Defaults to 'en'\r\n */\n\nexport var resolveBrowserLocale = function (defaultLocale) {\n  if (defaultLocale === void 0) {\n    defaultLocale = DEFAULT_LOCALE;\n  } // from http://blog.ksol.fr/user-locale-detection-browser-javascript/\n  // Rely on the window.navigator object to determine user locale\n\n\n  var _a = window.navigator,\n      language = _a.language,\n      browserLanguage = _a.browserLanguage,\n      userLanguage = _a.userLanguage;\n  return (language || browserLanguage || userLanguage || defaultLocale).split('-')[0];\n};\n/**\r\n * Compose translations from multiple packages for a single language (eg: 'english').\r\n *\r\n * Use it to merge translations from addons with the main react-admin translations.\r\n *\r\n * @example\r\n *     import * as React from \"react\";\r\n *     import { Admin, Resource, mergeTranslations } from 'react-admin';\r\n *     import englishMessages from 'ra-language-english';\r\n *     import englishTreeMessages from 'ra-tree-language-english';\r\n *     const messages = {\r\n *        en: mergeTranslations(englishMessages, englishTreeMessages),\r\n *     };\r\n *     const App = () => (\r\n *         <Admin locale=\"en\" messages={messages}>\r\n *             ...\r\n *         </Admin>\r\n *     );\r\n */\n\nexport var mergeTranslations = function () {\n  var translationsModules = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    translationsModules[_i] = arguments[_i];\n  }\n\n  return merge.apply(void 0, __spreadArrays([{}], translationsModules));\n};","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/ra-core/esm/i18n/TranslationUtils.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","merge","DEFAULT_LOCALE","resolveBrowserLocale","defaultLocale","_a","window","navigator","language","browserLanguage","userLanguage","split","mergeTranslations","translationsModules","_i","apply"],"mappings":"AAAA,IAAIA,cAAc,GAAI,QAAQ,KAAKA,cAAd,IAAiC,YAAY;AAC9D,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAAf,EAAkBC,EAAE,GAAGC,SAAS,CAACC,MAAtC,EAA8CH,CAAC,GAAGC,EAAlD,EAAsDD,CAAC,EAAvD,EAA2DD,CAAC,IAAIG,SAAS,CAACF,CAAD,CAAT,CAAaG,MAAlB;;AAC3D,OAAK,IAAIC,CAAC,GAAGC,KAAK,CAACN,CAAD,CAAb,EAAkBO,CAAC,GAAG,CAAtB,EAAyBN,CAAC,GAAG,CAAlC,EAAqCA,CAAC,GAAGC,EAAzC,EAA6CD,CAAC,EAA9C,EACI,KAAK,IAAIO,CAAC,GAAGL,SAAS,CAACF,CAAD,CAAjB,EAAsBQ,CAAC,GAAG,CAA1B,EAA6BC,EAAE,GAAGF,CAAC,CAACJ,MAAzC,EAAiDK,CAAC,GAAGC,EAArD,EAAyDD,CAAC,IAAIF,CAAC,EAA/D,EACIF,CAAC,CAACE,CAAD,CAAD,GAAOC,CAAC,CAACC,CAAD,CAAR;;AACR,SAAOJ,CAAP;AACH,CAND;;AAOA,OAAOM,KAAP,MAAkB,cAAlB;AACA,SAASC,cAAT,QAA+B,SAA/B;AACA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,IAAIC,oBAAoB,GAAG,UAAUC,aAAV,EAAyB;AACvD,MAAIA,aAAa,KAAK,KAAK,CAA3B,EAA8B;AAAEA,IAAAA,aAAa,GAAGF,cAAhB;AAAiC,GADV,CAEvD;AACA;;;AACA,MAAIG,EAAE,GAAGC,MAAM,CAACC,SAAhB;AAAA,MAA2BC,QAAQ,GAAGH,EAAE,CAACG,QAAzC;AAAA,MAAmDC,eAAe,GAAGJ,EAAE,CAACI,eAAxE;AAAA,MAAyFC,YAAY,GAAGL,EAAE,CAACK,YAA3G;AACA,SAAO,CAACF,QAAQ,IAAIC,eAAZ,IAA+BC,YAA/B,IAA+CN,aAAhD,EAA+DO,KAA/D,CAAqE,GAArE,EAA0E,CAA1E,CAAP;AACH,CANM;AAOP;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAIC,iBAAiB,GAAG,YAAY;AACvC,MAAIC,mBAAmB,GAAG,EAA1B;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGrB,SAAS,CAACC,MAAhC,EAAwCoB,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,mBAAmB,CAACC,EAAD,CAAnB,GAA0BrB,SAAS,CAACqB,EAAD,CAAnC;AACH;;AACD,SAAOb,KAAK,CAACc,KAAN,CAAY,KAAK,CAAjB,EAAoB1B,cAAc,CAAC,CAAC,EAAD,CAAD,EAAOwB,mBAAP,CAAlC,CAAP;AACH,CANM","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nimport merge from 'lodash/merge';\r\nimport { DEFAULT_LOCALE } from './index';\r\n/**\r\n * Resolve the browser locale according to the value of the global window.navigator\r\n *\r\n * Use it to determine the <Admin> locale at runtime.\r\n *\r\n * @example\r\n *     import * as React from \"react\";\r\n *     import { Admin, Resource, resolveBrowserLocale } from 'react-admin';\r\n *     import englishMessages from 'ra-language-english';\r\n *     import frenchMessages from 'ra-language-french';\r\n *     const messages = {\r\n *        fr: frenchMessages,\r\n *        en: englishMessages,\r\n *     };\r\n *     const App = () => (\r\n *         <Admin locale={resolveBrowserLocale()} messages={messages}>\r\n *             ...\r\n *         </Admin>\r\n *     );\r\n *\r\n * @param {string} defaultLocale Defaults to 'en'\r\n */\r\nexport var resolveBrowserLocale = function (defaultLocale) {\r\n    if (defaultLocale === void 0) { defaultLocale = DEFAULT_LOCALE; }\r\n    // from http://blog.ksol.fr/user-locale-detection-browser-javascript/\r\n    // Rely on the window.navigator object to determine user locale\r\n    var _a = window.navigator, language = _a.language, browserLanguage = _a.browserLanguage, userLanguage = _a.userLanguage;\r\n    return (language || browserLanguage || userLanguage || defaultLocale).split('-')[0];\r\n};\r\n/**\r\n * Compose translations from multiple packages for a single language (eg: 'english').\r\n *\r\n * Use it to merge translations from addons with the main react-admin translations.\r\n *\r\n * @example\r\n *     import * as React from \"react\";\r\n *     import { Admin, Resource, mergeTranslations } from 'react-admin';\r\n *     import englishMessages from 'ra-language-english';\r\n *     import englishTreeMessages from 'ra-tree-language-english';\r\n *     const messages = {\r\n *        en: mergeTranslations(englishMessages, englishTreeMessages),\r\n *     };\r\n *     const App = () => (\r\n *         <Admin locale=\"en\" messages={messages}>\r\n *             ...\r\n *         </Admin>\r\n *     );\r\n */\r\nexport var mergeTranslations = function () {\r\n    var translationsModules = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        translationsModules[_i] = arguments[_i];\r\n    }\r\n    return merge.apply(void 0, __spreadArrays([{}], translationsModules));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}