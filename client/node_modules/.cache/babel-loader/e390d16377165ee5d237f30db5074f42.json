{"ast":null,"code":"import get from 'lodash/get';\nexport var canReplyWithCache = function (type, payload, resourceState) {\n  var now = new Date();\n\n  switch (type) {\n    case 'getList':\n      return get(resourceState, ['list', 'cachedRequests', JSON.stringify(payload), 'validity']) > now;\n\n    case 'getOne':\n      return resourceState && resourceState.validity && resourceState.validity[payload.id] > now;\n\n    case 'getMany':\n      return resourceState && resourceState.validity && payload.ids.every(function (id) {\n        return resourceState.validity[id] > now;\n      });\n\n    default:\n      return false;\n  }\n};\nexport var getResultFromCache = function (type, payload, resourceState) {\n  switch (type) {\n    case 'getList':\n      {\n        var data_1 = resourceState.data;\n        var requestSignature = JSON.stringify(payload);\n        var cachedRequest = resourceState.list.cachedRequests[requestSignature];\n        return {\n          data: cachedRequest.ids.map(function (id) {\n            return data_1[id];\n          }),\n          total: cachedRequest.total\n        };\n      }\n\n    case 'getOne':\n      return {\n        data: resourceState.data[payload.id]\n      };\n\n    case 'getMany':\n      return {\n        data: payload.ids.map(function (id) {\n          return resourceState.data[id];\n        })\n      };\n\n    default:\n      throw new Error('cannot reply with cache for this method');\n  }\n};","map":{"version":3,"sources":["C:/Users/Felhasználó/IdeaProjects/node-rest-shop/client/node_modules/ra-core/esm/dataProvider/replyWithCache.js"],"names":["get","canReplyWithCache","type","payload","resourceState","now","Date","JSON","stringify","validity","id","ids","every","getResultFromCache","data_1","data","requestSignature","cachedRequest","list","cachedRequests","map","total","Error"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAO,IAAIC,iBAAiB,GAAG,UAAUC,IAAV,EAAgBC,OAAhB,EAAyBC,aAAzB,EAAwC;AACnE,MAAIC,GAAG,GAAG,IAAIC,IAAJ,EAAV;;AACA,UAAQJ,IAAR;AACI,SAAK,SAAL;AACI,aAAQF,GAAG,CAACI,aAAD,EAAgB,CACvB,MADuB,EAEvB,gBAFuB,EAGvBG,IAAI,CAACC,SAAL,CAAeL,OAAf,CAHuB,EAIvB,UAJuB,CAAhB,CAAH,GAKHE,GALL;;AAMJ,SAAK,QAAL;AACI,aAAQD,aAAa,IACjBA,aAAa,CAACK,QADV,IAEJL,aAAa,CAACK,QAAd,CAAuBN,OAAO,CAACO,EAA/B,IAAqCL,GAFzC;;AAGJ,SAAK,SAAL;AACI,aAAQD,aAAa,IACjBA,aAAa,CAACK,QADV,IAEJN,OAAO,CAACQ,GAAR,CAAYC,KAAZ,CAAkB,UAAUF,EAAV,EAAc;AAAE,eAAON,aAAa,CAACK,QAAd,CAAuBC,EAAvB,IAA6BL,GAApC;AAA0C,OAA5E,CAFJ;;AAGJ;AACI,aAAO,KAAP;AAjBR;AAmBH,CArBM;AAsBP,OAAO,IAAIQ,kBAAkB,GAAG,UAAUX,IAAV,EAAgBC,OAAhB,EAAyBC,aAAzB,EAAwC;AACpE,UAAQF,IAAR;AACI,SAAK,SAAL;AAAgB;AACZ,YAAIY,MAAM,GAAGV,aAAa,CAACW,IAA3B;AACA,YAAIC,gBAAgB,GAAGT,IAAI,CAACC,SAAL,CAAeL,OAAf,CAAvB;AACA,YAAIc,aAAa,GAAGb,aAAa,CAACc,IAAd,CAAmBC,cAAnB,CAAkCH,gBAAlC,CAApB;AACA,eAAO;AACHD,UAAAA,IAAI,EAAEE,aAAa,CAACN,GAAd,CAAkBS,GAAlB,CAAsB,UAAUV,EAAV,EAAc;AAAE,mBAAOI,MAAM,CAACJ,EAAD,CAAb;AAAoB,WAA1D,CADH;AAEHW,UAAAA,KAAK,EAAEJ,aAAa,CAACI;AAFlB,SAAP;AAIH;;AACD,SAAK,QAAL;AACI,aAAO;AAAEN,QAAAA,IAAI,EAAEX,aAAa,CAACW,IAAd,CAAmBZ,OAAO,CAACO,EAA3B;AAAR,OAAP;;AACJ,SAAK,SAAL;AACI,aAAO;AACHK,QAAAA,IAAI,EAAEZ,OAAO,CAACQ,GAAR,CAAYS,GAAZ,CAAgB,UAAUV,EAAV,EAAc;AAAE,iBAAON,aAAa,CAACW,IAAd,CAAmBL,EAAnB,CAAP;AAAgC,SAAhE;AADH,OAAP;;AAGJ;AACI,YAAM,IAAIY,KAAJ,CAAU,yCAAV,CAAN;AAjBR;AAmBH,CApBM","sourcesContent":["import get from 'lodash/get';\r\nexport var canReplyWithCache = function (type, payload, resourceState) {\r\n    var now = new Date();\r\n    switch (type) {\r\n        case 'getList':\r\n            return (get(resourceState, [\r\n                'list',\r\n                'cachedRequests',\r\n                JSON.stringify(payload),\r\n                'validity',\r\n            ]) > now);\r\n        case 'getOne':\r\n            return (resourceState &&\r\n                resourceState.validity &&\r\n                resourceState.validity[payload.id] > now);\r\n        case 'getMany':\r\n            return (resourceState &&\r\n                resourceState.validity &&\r\n                payload.ids.every(function (id) { return resourceState.validity[id] > now; }));\r\n        default:\r\n            return false;\r\n    }\r\n};\r\nexport var getResultFromCache = function (type, payload, resourceState) {\r\n    switch (type) {\r\n        case 'getList': {\r\n            var data_1 = resourceState.data;\r\n            var requestSignature = JSON.stringify(payload);\r\n            var cachedRequest = resourceState.list.cachedRequests[requestSignature];\r\n            return {\r\n                data: cachedRequest.ids.map(function (id) { return data_1[id]; }),\r\n                total: cachedRequest.total,\r\n            };\r\n        }\r\n        case 'getOne':\r\n            return { data: resourceState.data[payload.id] };\r\n        case 'getMany':\r\n            return {\r\n                data: payload.ids.map(function (id) { return resourceState.data[id]; }),\r\n            };\r\n        default:\r\n            throw new Error('cannot reply with cache for this method');\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}