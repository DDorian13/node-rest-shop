{"ast":null,"code":"const authProvider = {\n  //login-ben username-t kell hasznalni, mert az a neve a felso beviteli mezonek\n  login: ({\n    username,\n    password\n  }) => {\n    const request = new Request('http://localhost:3000/user/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email: username,\n        password: password\n      }),\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    });\n    return fetch(request).then(response => {\n      if (response.status < 200 || response.status >= 300) {\n        throw new Error(response.statusText);\n      }\n\n      return response.json();\n    }).then(token => {\n      const decodedToken = decodeJwt(token);\n      localStorage.setItem('token', JSON.stringify(token));\n    });\n  },\n  getIdentity: () => {\n    const {\n      id,\n      fullName,\n      avatar\n    } = JSON.parse(localStorage.getItem('token'));\n    return {\n      id,\n      fullName,\n      avatar\n    };\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    return Promise.resolve();\n  },\n  checkError: error => {\n    const status = error.status;\n\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('token');\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  },\n  checkAuth: () => localStorage.getItem('token') ? Promise.resolve() : Promise.reject()\n};\nexport default authProvider;","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/src/authentication/authProvider.js"],"names":["authProvider","login","username","password","request","Request","method","body","JSON","stringify","email","headers","Headers","fetch","then","response","status","Error","statusText","json","token","decodedToken","decodeJwt","localStorage","setItem","getIdentity","id","fullName","avatar","parse","getItem","logout","removeItem","Promise","resolve","checkError","error","reject","checkAuth"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjB;AACAC,EAAAA,KAAK,EAAE,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,KAA6B;AAChC,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,kCAAZ,EAAgD;AAC5DC,MAAAA,MAAM,EAAE,MADoD;AAE5DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,KAAK,EAAER,QAAT;AAAmBC,QAAAA,QAAQ,EAAEA;AAA7B,OAAf,CAFsD;AAG5DQ,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,wBAAgB;AAAlB,OAAZ;AAHmD,KAAhD,CAAhB;AAKA,WAAOC,KAAK,CAACT,OAAD,CAAL,CACFU,IADE,CACGC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACC,MAAT,GAAkB,GAAlB,IAAyBD,QAAQ,CAACC,MAAT,IAAmB,GAAhD,EAAqD;AACjD,cAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACH;;AACD,aAAOH,QAAQ,CAACI,IAAT,EAAP;AACH,KANE,EAOFL,IAPE,CAOGM,KAAK,IAAI;AACX,YAAMC,YAAY,GAAGC,SAAS,CAACF,KAAD,CAA9B;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BhB,IAAI,CAACC,SAAL,CAAeW,KAAf,CAA9B;AACH,KAVE,CAAP;AAWH,GAnBgB;AAoBjBK,EAAAA,WAAW,EAAE,MAAM;AACf,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,QAAN;AAAgBC,MAAAA;AAAhB,QAA0BpB,IAAI,CAACqB,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB,OAArB,CAAX,CAAhC;AACA,WAAO;AAAEJ,MAAAA,EAAF;AAAMC,MAAAA,QAAN;AAAgBC,MAAAA;AAAhB,KAAP;AACH,GAvBgB;AAwBjBG,EAAAA,MAAM,EAAE,MAAM;AACVR,IAAAA,YAAY,CAACS,UAAb,CAAwB,OAAxB;AACA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH,GA3BgB;AA4BjBC,EAAAA,UAAU,EAAGC,KAAD,IAAW;AACnB,UAAMpB,MAAM,GAAGoB,KAAK,CAACpB,MAArB;;AACA,QAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AAClCO,MAAAA,YAAY,CAACS,UAAb,CAAwB,OAAxB;AACA,aAAOC,OAAO,CAACI,MAAR,EAAP;AACH;;AACD,WAAOJ,OAAO,CAACC,OAAR,EAAP;AACH,GAnCgB;AAoCjBI,EAAAA,SAAS,EAAE,MAAMf,YAAY,CAACO,OAAb,CAAqB,OAArB,IACXG,OAAO,CAACC,OAAR,EADW,GAEXD,OAAO,CAACI,MAAR;AAtCW,CAArB;AAyCA,eAAerC,YAAf","sourcesContent":["const authProvider = {\r\n    //login-ben username-t kell hasznalni, mert az a neve a felso beviteli mezonek\r\n    login: ({ username, password }) =>  {\r\n        const request = new Request('http://localhost:3000/user/login', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ email: username, password: password }),\r\n            headers: new Headers({ 'Content-Type': 'application/json' }),\r\n        });\r\n        return fetch(request)\r\n            .then(response => {\r\n                if (response.status < 200 || response.status >= 300) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(token => {\r\n                const decodedToken = decodeJwt(token);\r\n                localStorage.setItem('token', JSON.stringify(token));\r\n            });\r\n    },\r\n    getIdentity: () => {\r\n        const { id, fullName, avatar} = JSON.parse(localStorage.getItem('token'));\r\n        return { id, fullName, avatar};\r\n    },\r\n    logout: () => {\r\n        localStorage.removeItem('token');\r\n        return Promise.resolve();\r\n    },\r\n    checkError: (error) => {\r\n        const status = error.status;\r\n        if (status === 401 || status === 403) {\r\n            localStorage.removeItem('token');\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    },\r\n    checkAuth: () => localStorage.getItem('token')\r\n        ? Promise.resolve()\r\n        : Promise.reject(),\r\n};\r\n\r\nexport default authProvider;"]},"metadata":{},"sourceType":"module"}