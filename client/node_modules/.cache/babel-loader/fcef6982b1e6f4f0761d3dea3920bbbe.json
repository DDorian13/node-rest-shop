{"ast":null,"code":"/* jshint node:true */\n'use strict'; // Escape the textDelimiters contained in the field\n\n/*(https://tools.ietf.org/html/rfc4180)\r\n   7.  If double-quotes are used to enclose fields, then a double-quote\r\n   appearing inside a field must be escaped by preceding it with\r\n   another double quote.\r\n   For example: \"aaa\",\"b\"\"bb\",\"ccc\"\r\n*/\n\nmodule.exports = function escapedDelimiters(textDelimiter, rowDelimiter, forceTextDelimiter) {\n  var endOfLine = '\\n';\n\n  if (typeof textDelimiter !== 'string') {\n    throw new TypeError('Invalid param \"textDelimiter\", must be a string.');\n  }\n\n  if (typeof rowDelimiter !== 'string') {\n    throw new TypeError('Invalid param \"rowDelimiter\", must be a string.');\n  }\n\n  var textDelimiterRegex = new RegExp(\"\\\\\" + textDelimiter, 'g');\n  var escapedDelimiter = textDelimiter + textDelimiter;\n  var enclosingCondition = textDelimiter === '\"' ? function (value) {\n    return value.indexOf(rowDelimiter) >= 0 || value.indexOf(endOfLine) >= 0 || value.indexOf('\"') >= 0;\n  } : function (value) {\n    return value.indexOf(rowDelimiter) >= 0 || value.indexOf(endOfLine) >= 0;\n  };\n  return function (value) {\n    if (forceTextDelimiter) value = \"\" + value;\n    if (!value.replace) return value; // Escape the textDelimiters contained in the field\n\n    value = value.replace(textDelimiterRegex, escapedDelimiter); // Escape the whole field if it contains a rowDelimiter or a linebreak or double quote\n\n    if (forceTextDelimiter || enclosingCondition(value)) {\n      value = textDelimiter + value + textDelimiter;\n    }\n\n    return value;\n  };\n};","map":{"version":3,"sources":["C:/Users/Dávid Dorián/Egyetem/5. félév/Témalabor/AndroidLibrary/node-rest-shop/client/node_modules/jsonexport/dist/core/escape-delimiters.js"],"names":["module","exports","escapedDelimiters","textDelimiter","rowDelimiter","forceTextDelimiter","endOfLine","TypeError","textDelimiterRegex","RegExp","escapedDelimiter","enclosingCondition","value","indexOf","replace"],"mappings":"AAAA;AACA,a,CAEA;;AACA;;;;;;;AAOAA,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,aAA3B,EAA0CC,YAA1C,EAAwDC,kBAAxD,EAA4E;AAC3F,MAAIC,SAAS,GAAG,IAAhB;;AAEA,MAAI,OAAOH,aAAP,KAAyB,QAA7B,EAAuC;AACrC,UAAM,IAAII,SAAJ,CAAc,kDAAd,CAAN;AACD;;AAED,MAAI,OAAOH,YAAP,KAAwB,QAA5B,EAAsC;AACpC,UAAM,IAAIG,SAAJ,CAAc,iDAAd,CAAN;AACD;;AAED,MAAIC,kBAAkB,GAAG,IAAIC,MAAJ,CAAW,OAAON,aAAlB,EAAiC,GAAjC,CAAzB;AACA,MAAIO,gBAAgB,GAAGP,aAAa,GAAGA,aAAvC;AAEA,MAAIQ,kBAAkB,GAAGR,aAAa,KAAK,GAAlB,GAAwB,UAAUS,KAAV,EAAiB;AAChE,WAAOA,KAAK,CAACC,OAAN,CAAcT,YAAd,KAA+B,CAA/B,IAAoCQ,KAAK,CAACC,OAAN,CAAcP,SAAd,KAA4B,CAAhE,IAAqEM,KAAK,CAACC,OAAN,CAAc,GAAd,KAAsB,CAAlG;AACD,GAFwB,GAErB,UAAUD,KAAV,EAAiB;AACnB,WAAOA,KAAK,CAACC,OAAN,CAAcT,YAAd,KAA+B,CAA/B,IAAoCQ,KAAK,CAACC,OAAN,CAAcP,SAAd,KAA4B,CAAvE;AACD,GAJD;AAMA,SAAO,UAAUM,KAAV,EAAiB;AACtB,QAAIP,kBAAJ,EAAwBO,KAAK,GAAG,KAAKA,KAAb;AAExB,QAAI,CAACA,KAAK,CAACE,OAAX,EAAoB,OAAOF,KAAP,CAHE,CAItB;;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAcN,kBAAd,EAAkCE,gBAAlC,CAAR,CALsB,CAOtB;;AACA,QAAIL,kBAAkB,IAAIM,kBAAkB,CAACC,KAAD,CAA5C,EAAqD;AACnDA,MAAAA,KAAK,GAAGT,aAAa,GAAGS,KAAhB,GAAwBT,aAAhC;AACD;;AAED,WAAOS,KAAP;AACD,GAbD;AAcD,CAlCD","sourcesContent":["/* jshint node:true */\r\n'use strict';\r\n\r\n// Escape the textDelimiters contained in the field\r\n/*(https://tools.ietf.org/html/rfc4180)\r\n   7.  If double-quotes are used to enclose fields, then a double-quote\r\n   appearing inside a field must be escaped by preceding it with\r\n   another double quote.\r\n   For example: \"aaa\",\"b\"\"bb\",\"ccc\"\r\n*/\r\n\r\nmodule.exports = function escapedDelimiters(textDelimiter, rowDelimiter, forceTextDelimiter) {\r\n  var endOfLine = '\\n';\r\n\r\n  if (typeof textDelimiter !== 'string') {\r\n    throw new TypeError('Invalid param \"textDelimiter\", must be a string.');\r\n  }\r\n\r\n  if (typeof rowDelimiter !== 'string') {\r\n    throw new TypeError('Invalid param \"rowDelimiter\", must be a string.');\r\n  }\r\n\r\n  var textDelimiterRegex = new RegExp(\"\\\\\" + textDelimiter, 'g');\r\n  var escapedDelimiter = textDelimiter + textDelimiter;\r\n\r\n  var enclosingCondition = textDelimiter === '\"' ? function (value) {\r\n    return value.indexOf(rowDelimiter) >= 0 || value.indexOf(endOfLine) >= 0 || value.indexOf('\"') >= 0;\r\n  } : function (value) {\r\n    return value.indexOf(rowDelimiter) >= 0 || value.indexOf(endOfLine) >= 0;\r\n  };\r\n\r\n  return function (value) {\r\n    if (forceTextDelimiter) value = \"\" + value;\r\n\r\n    if (!value.replace) return value;\r\n    // Escape the textDelimiters contained in the field\r\n    value = value.replace(textDelimiterRegex, escapedDelimiter);\r\n\r\n    // Escape the whole field if it contains a rowDelimiter or a linebreak or double quote\r\n    if (forceTextDelimiter || enclosingCondition(value)) {\r\n      value = textDelimiter + value + textDelimiter;\r\n    }\r\n\r\n    return value;\r\n  };\r\n};"]},"metadata":{},"sourceType":"script"}