var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { stringify } from "query-string";
import { fetchUtils } from "ra-core";
/**
 * Based on https://github.com/marmelab/react-admin/master/packages/ra-data-simple-rest
 * but extended to support non-'id' identifier names, as well as a response trasform function
 *
 * Maps react-admin queries to a simple REST API
 *
 * This REST dialect is similar to the one of FakeRest
 *
 * @see https://github.com/marmelab/FakeRest
 *
 * @example
 *
 * getList     => GET http://my.api.url/posts?sort=['title','ASC']&range=[0, 24]
 * getOne      => GET http://my.api.url/posts/123
 * getMany     => GET http://my.api.url/posts?filter={id:[123,456,789]}
 * update      => PUT http://my.api.url/posts/123
 * create      => POST http://my.api.url/posts
 * delete      => DELETE http://my.api.url/posts/123
 *
 * @example
 *
 * import * as React from "react";
 * import { Admin, Resource } from 'react-admin';
 * import restProvider from 'ra-data-rest-client';
 *
 * import { PostList } from './posts';
 *
 * const App = () => (
 *     <Admin dataProvider={restProvider('http://path.to.my.api/',
 *       {'posts':'key'}, // your id remapping
 *       {
 *          'posts': (o) => {
 *            // gives posts new property based on other properties....
 *            o.c = o.a + o.b;
 *            return o;
 *          }
 *        }
 *     )}>
 *         <Resource name="posts" list={PostList} />
 *     </Admin>
 * );
 *
 * export default App;
 */
var _reKeyResponse = function (json, key) {
    if (key === null) {
        return json;
    }
    else if (Array.isArray(json)) {
        return json.map(function (x) {
            x.id = x[key];
            delete x[key];
            return x;
        });
    }
    else if (json[key] !== null) {
        json.id = json[key];
        delete json[key];
        return json;
    }
    else {
        console.error("undhandled scenario of _reKeyResponse", key, json);
    }
};
var _xFormResponse = function (json, xFormFn) {
    if (!xFormFn) {
        return json;
    }
    if (json === null) {
        return json;
    }
    else if (Array.isArray(json)) {
        return json.map(xFormFn);
    }
    else {
        return xFormFn(json);
    }
};
var _reKeyPayload = function (data, reParam) {
    if (reParam === null) {
        return data;
    }
    var id = data.id, others = __rest(data, ["id"]);
    others[reParam] = data.id;
    return others;
};
var _reKeyFilter = function (filter, reParam) {
    if (filter === null) {
        return null;
    }
    var id = filter.id, reFilter = __rest(filter, ["id"]);
    if (reParam !== null && id) {
        reFilter[reParam] = id;
    }
    return reFilter;
};
export default (function (apiUrl, keysByResource /* ex: {'posts':'key',...} */, responseTransformsByResource, httpClient, countHeader) {
    if (keysByResource === void 0) { keysByResource = {}; }
    if (responseTransformsByResource === void 0) { responseTransformsByResource = {}; }
    if (httpClient === void 0) { httpClient = fetchUtils.fetchJson; }
    if (countHeader === void 0) { countHeader = "Content-Range"; }
    return ({
        keysByResource: keysByResource,
        xFormBy: responseTransformsByResource,
        getList: function (resource, params) {
            var reParam = resource in keysByResource ? keysByResource[resource] : null;
            var _a = params.pagination, page = _a.page, perPage = _a.perPage;
            var _b = params.sort, field = _b.field, order = _b.order;
            var reFilter = _reKeyFilter(params.filter, reParam);
            if (reParam != null && field === "id") {
                field = reParam;
            }
            var rangeStart = (page - 1) * perPage;
            var rangeEnd = page * perPage - 1;
            var query = {
                sort: JSON.stringify([field, order]),
                range: JSON.stringify([rangeStart, rangeEnd]),
                filter: JSON.stringify(reFilter),
            };
            var url = apiUrl + "/" + resource + "?" + stringify(query);
            var options = countHeader === "Content-Range"
                ? {
                    // Chrome doesn't return `Content-Range` header if no `Range` is provided in the request.
                    headers: new Headers({
                        Range: resource + "=" + rangeStart + "-" + rangeEnd,
                    }),
                }
                : {};
            return httpClient(url, options).then(function (_a) {
                var headers = _a.headers, json = _a.json;
                if (!headers.has(countHeader)) {
                    throw new Error("The " + countHeader + " header is missing in the HTTP Response. The simple REST data provider expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare " + countHeader + " in the Access-Control-Expose-Headers header?");
                }
                return {
                    data: _xFormResponse(_reKeyResponse(json, reParam), responseTransformsByResource[resource]),
                    total: countHeader === "Content-Range"
                        ? parseInt(headers.get("content-range").split("/").pop(), 10)
                        : parseInt(headers.get(countHeader.toLowerCase())),
                };
            });
        },
        getOne: function (resource, params) {
            var reParam = resource in keysByResource ? keysByResource[resource] : null;
            return httpClient(apiUrl + "/" + resource + "/" + params.id).then(function (_a) {
                var json = _a.json;
                return ({
                    data: _xFormResponse(_reKeyResponse(json, reParam), responseTransformsByResource[resource]),
                });
            });
        },
        getMany: function (resource, params) {
            var reParam = resource in keysByResource ? keysByResource[resource] : null;
            var q = {};
            q[reParam !== null && reParam !== void 0 ? reParam : "id"] = params.ids;
            var query = {
                filter: JSON.stringify(q),
            };
            var url = apiUrl + "/" + resource + "?" + stringify(query);
            return httpClient(url).then(function (_a) {
                var json = _a.json;
                return ({
                    data: _xFormResponse(_reKeyResponse(json, reParam), responseTransformsByResource[resource]),
                });
            });
        },
        getManyReference: function (resource, params) {
            var _a;
            var reParam = resource in keysByResource ? keysByResource[resource] : null;
            var _b = params.pagination, page = _b.page, perPage = _b.perPage;
            var _c = params.sort, field = _c.field, order = _c.order;
            var reFilter = _reKeyFilter(params.filter, reParam);
            if (reParam != null && field === "id") {
                field = reParam;
            }
            var rangeStart = (page - 1) * perPage;
            var rangeEnd = page * perPage - 1;
            var query = {
                sort: JSON.stringify([field, order]),
                range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),
                filter: JSON.stringify(__assign(__assign({}, reFilter), (_a = {}, _a[params.target] = params.id, _a))),
            };
            var url = apiUrl + "/" + resource + "?" + stringify(query);
            var options = countHeader === "Content-Range"
                ? {
                    // Chrome doesn't return `Content-Range` header if no `Range` is provided in the request.
                    headers: new Headers({
                        Range: resource + "=" + rangeStart + "-" + rangeEnd,
                    }),
                }
                : {};
            return httpClient(url, options).then(function (_a) {
                var headers = _a.headers, json = _a.json;
                if (!headers.has(countHeader)) {
                    throw new Error("The " + countHeader + " header is missing in the HTTP Response. The simple REST data provider expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare " + countHeader + " in the Access-Control-Expose-Headers header?");
                }
                return {
                    data: _xFormResponse(_reKeyResponse(json, reParam), responseTransformsByResource[resource]),
                    total: countHeader === "Content-Range"
                        ? parseInt(headers.get("content-range").split("/").pop(), 10)
                        : parseInt(headers.get(countHeader.toLowerCase())),
                };
            });
        },
        update: function (resource, params) {
            var reParam = resource in keysByResource ? keysByResource[resource] : null;
            var reData = _reKeyPayload(params.data, reParam);
            return httpClient(apiUrl + "/" + resource + "/" + params.id, {
                method: "PUT",
                body: JSON.stringify(reData),
            }).then(function (_a) {
                var json = _a.json;
                return ({
                    data: _xFormResponse(_reKeyResponse(json, reParam), responseTransformsByResource[resource]),
                });
            });
        },
        // simple-rest doesn't handle provide an updateMany route, so we fallback to calling update n times instead
        updateMany: function (resource, params) {
            var reParam = resource in keysByResource ? keysByResource[resource] : null;
            var idKey = reParam !== null && reParam !== void 0 ? reParam : "id";
            return Promise.all(params.ids.map(function (id) {
                var reData = _reKeyPayload(params.data, reParam);
                return httpClient(apiUrl + "/" + resource + "/" + id, {
                    method: "PUT",
                    body: JSON.stringify(reData),
                });
            })).then(function (responses) { return ({ data: responses.map(function (_a) {
                    var json = _a.json;
                    return json[idKey];
                }) }); });
        },
        create: function (resource, params) {
            var reParam = resource in keysByResource ? keysByResource[resource] : null;
            var reData = _reKeyPayload(params.data, reParam);
            var idKey = reParam !== null && reParam !== void 0 ? reParam : "id";
            return httpClient(apiUrl + "/" + resource, {
                method: "POST",
                body: JSON.stringify(reData),
            }).then(function (_a) {
                var json = _a.json;
                return ({
                    data: __assign(__assign({}, params.data), { id: json[idKey] }),
                });
            });
        },
        delete: function (resource, params) {
            var reParam = resource in keysByResource ? keysByResource[resource] : null;
            return httpClient(apiUrl + "/" + resource + "/" + params.id, {
                method: "DELETE",
            }).then(function (_a) {
                var json = _a.json;
                return ({
                    data: _xFormResponse(_reKeyResponse(json, reParam), responseTransformsByResource[resource]),
                });
            });
        },
        // simple-rest doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead
        deleteMany: function (resource, params) {
            var reParam = resource in keysByResource ? keysByResource[resource] : null;
            var idKey = reParam !== null && reParam !== void 0 ? reParam : "id";
            return Promise.all(params.ids.map(function (id) {
                return httpClient(apiUrl + "/" + resource + "/" + id, {
                    method: "DELETE",
                });
            })).then(function (responses) { return ({ data: responses.map(function (_a) {
                    var json = _a.json;
                    return json[idKey];
                }) }); });
        },
    });
});
