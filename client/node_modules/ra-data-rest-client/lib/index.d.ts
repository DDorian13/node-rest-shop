import { fetchUtils, DataProvider } from "ra-core";
declare const _default: (
  apiUrl: string,
  keysByResource?: any,
  responseTransformsByResource?: any,
  httpClient?: (
    url: any,
    options?: fetchUtils.Options
  ) => Promise<{
    status: number;
    headers: Headers;
    body: string;
    json: any;
  }>,
  countHeader?: string
) => DataProvider;
/**
 * Based on https://github.com/marmelab/react-admin/master/packages/ra-data-simple-rest
 * but extended to support non-'id' identifier names, as well as a response trasform function
 *
 * Maps react-admin queries to a simple REST API
 *
 * This REST dialect is similar to the one of FakeRest
 *
 * @see https://github.com/marmelab/FakeRest
 *
 * @example
 *
 * getList     => GET http://my.api.url/posts?sort=['title','ASC']&range=[0, 24]
 * getOne      => GET http://my.api.url/posts/123
 * getMany     => GET http://my.api.url/posts?filter={id:[123,456,789]}
 * update      => PUT http://my.api.url/posts/123
 * create      => POST http://my.api.url/posts
 * delete      => DELETE http://my.api.url/posts/123
 *
 * @example
 *
 * import * as React from "react";
 * import { Admin, Resource } from 'react-admin';
 * import restProvider from 'ra-data-rest-client';
 *
 * import { PostList } from './posts';
 *
 * const App = () => (
 *     <Admin dataProvider={restProvider('http://path.to.my.api/',
 *       {'posts':'key'}, // your id remapping
 *       {
 *          'posts': (o) => {
 *            // gives posts new property based on other properties....
 *            o.c = o.a + o.b;
 *            return o;
 *          }
 *        }
 *     )}>
 *         <Resource name="posts" list={PostList} />
 *     </Admin>
 * );
 *
 * export default App;
 */
export default _default;
